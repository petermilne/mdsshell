dnl Process this file with autoconf to produce a configure script.
dnl @(#)$RCSfile: configure.in,v $ $Revision: 1.184 $
AC_INIT()

AC_CONFIG_HEADER(include/config.h)
AC_CONFIG_AUX_DIR(conf)
AC_CANONICAL_SYSTEM

dnl See if we need to use native compilers
case "$target" in
hppa*) : ${CC=cc};
       : ${F77=f77};;
alpha-dec-osf*) : ${CC=cc};
		: ${F77=f77};;
sparc-sun-solaris2*) : ${CC=cc};;
esac

AC_CHECK_SIZEOF(int *)
SIZEOF_INT_P=$ac_cv_sizeof_int_p


if test "$NOF77"
then
:;
else
AC_PROG_F77
fi

dnl Check out the compiler
AC_PROG_CC

AC_ARG_ENABLE(nodebug,
	[  --enable-nodebug        compile without debug info],
	if test "$enableval" = yes; then
               CFLAGS="";
               FFLAGS="";
	fi)

AC_ARG_WITH(xio,
	[  --with-xio=globus-location:flavor  use globus xio for mdsip communications],
          MDSTCPIP="mdsip_xio"
          GLOBUS_LOCATION=`echo $withval | awk -F: '{print $1}'`
          GLOBUS_FLAVOR=`echo $withval | awk -F: '{print $2}'`
          if test "$GLOBUS_FLAVOR" = ""
	  then
            cat <<EOF

YOU NEED TO PROVIDE GLOBUS_LOCATION and FLAVOR when using the --with-xio option
Format:   --with-xio=globus-install-directory:flavor
Example:  --with-xio=/usr/local/gt3:gcc32pthr

Note you should use a pthr (pthreads) variant of the flavor installed on your system.

EOF
            exit
          fi 
        ,
          MDSTCPIP="mdstcpip"
        )

AC_ARG_ENABLE(globus,
	[  --enable-globus        use globus_io for mdsip communications],
	if test "$enableval" = yes; then
               : ${GLOBUS_FLAVOR=gcc32dbg}
               GLOBUS_CFLAGS="-DGLOBUS -I\$(GLOBUS_LOCATION)/include/$GLOBUS_FLAVOR"
               GLOBUS_LIBS="-L\$(GLOBUS_LOCATION)/lib -lglobus_io_$GLOBUS_FLAVOR \
                            -lglobus_common_$GLOBUS_FLAVOR"
        else
               GLOBUS_CFLAGS=""
               GLOBUS_LIBS=""
	fi)

AC_ARG_ENABLE(memcheck,
	[  --enable-memcheck       enable virtual memory debugging],
	if test "$enableval" = yes; then
           MEMCHK="-Dmalloc=MdsMALLOC -Dfree=MdsFREE -Drealloc=MdsREALLOC -Dcalloc=MdsCALLOC"
           MEMCHKLIB="-L\$(top_srcdir)/lib/ -lMdsShr"
        else
           MEMCHK=""
           MEMCHKLIB=""
        fi)

AC_ARG_ENABLE(gcc_profiling,
	[  --enable-gcc_profiling       enable gcc profiling],
	if test "$enableval" = yes; then
           GCCPROF="-pg"
        else
           GCCPROF=""
        fi)

if test "$NOF77"
then
:;
else
AC_PROG_F77
fi

FORLD=ld
LD=ld
LD_LDARC=""
LD_LDSHARE=""
IDL_LD=""
MDSVME=""
LOC="%loc"
CAMSHR=""

CFLAGS="$CFLAGS $GCCPROF $MEMCHK -I\$(top_srcdir)/include"
FFLAGS="$FFLAGS  -I\$(top_srcdir)/include"

: ${uiddir=$exec_prefix/uid}

MAKESHLIBDIR="\$(top_srcdir)/lib/"
MAKEBINDIR="\$(top_srcdir)/bin/"
MAKELIBDIR="\$(top_srcdir)/lib/"
EXPORTS_FILE=""
JVM="-ljvm"
TAR_EXCLUDE="-e"
GROFF_MAN_FLAGS="-t -man -Tascii"
GROFF=groff
HUP_TO_XINETD=""
HUP_TO_INETD=""

dnl Look for java jdk
AC_MSG_CHECKING(for presence of java jdk in /usr/java)
jdk_found=0
jdk_dir=""
jdk_dirs=`find /usr/java -type d -maxdepth 1 2>/dev/null`
if test $? = 0; then 
  for i in $jdk_dirs; do
    tmp=`ls -d $i/include >/dev/null 2>/dev/null`;
    if test $? = 0 && test $jdk_found = 0; then
      jdk_found=1;
      jdk_dir=$i;
    fi;
  done;
fi
if test $jdk_found = 1; then
  AC_MSG_RESULT(found. Will use $jdk_dir);
else
  AC_MSG_RESULT(not found);
fi

LIBPTHREAD=-lpthread
IS_HP=0
MITDEVICESIO_TARGETS=""
case "$target" in
hppa*) CFLAGS="$CFLAGS -Ae -Wl,+s -Wl,+b -Wl,/usr/lib:/usr/local/lib +DA1.1 +DS1.1 +z";
       FFLAGS="$FFLAGS +z +es -Wl,+s +DA1.1 +DS1.1";
       D3D_FFLAGS="+U77 +E1 -K"; 
       LDSHARE="-Wl,-a,shared_archive";
       LDARC="-Wl,-a,archive";
       LD_LDSHARE="-a shared_archive";
       LD_LDARC="-a archive";
       LINKSHARED="-b +s +b /usr/lib:/usr/local/lib";
       FOR_LDFLAGS="-v -L/usr/lib/pa1.1 -lcl -lf";
       LIBPATH="SHLIB_PATH";
       IDL_LD="-L/usr/local/rsi/idl/bin/bin.hp -lidl";
       FEXECLIBDIR="-Wl,-L";
       SHARETYPE=".sl";
       IS_HP=1;
       HUP_TO_INETD="kill -HUP \`ps -e | grep inetd | grep -v grep | awk '{print $1}'\`";;
mips*) CFLAGS="$CFLAGS -signed -D_BSD_SIGNALS -KPIC";
       FFLAGS="$FFLAGS -D_BSD_SIGNALS -KPIC";
       LDSHARE="-B dynamic";
       LDARC="-B static";
       LD_LDSHARE="-B dynamic";
       LD_LDARC="-B static";
       LINKSHARED="-shared ";
       FOR_LDFLAGS="";
       LIBPATH="LD_LIBRARY_PATH";
       FEXECLIBDIR="-L";
       HUP_TO_INETD="kill -HUP \`ps -e | grep inetd | grep -v grep | awk '{print $1}'\`";
       SHARETYPE=".so";;
sparc-sun-solaris2*)  
       GROFF=nroff;
       GROFF_MAN_FLAGS="-t -man ";
       if test $SIZEOF_INT_P = 4; then CFLAGS="$CFLAGS -D_ILP32 "; else CFLAGS="$CFLAGS -D_LP64 "; fi;
       if test $CC = gcc; then
	 LD=gcc;
	 FORLD=gcc;
         LINKSHARED="-Wl,-G -symbolic ";
         LD_LDSHARE="-Wl,-B,dynamic";
         LD_LDARC="-Wl,-B,static";
         LDSHARE="-Wl,-B,dynamic";
         LDARC="-Wl,-B,static";
         CFLAGS="$CFLAGS -fPIC ";
       else 
         LINKSHARED="-G ";
         LD_LDARC="-B static ";
         LD_LDSHARE="-B dynamic ";
         LDSHARE="-B dynamic";
         LDARC="-B static";
         if test -n "`echo 'int main(){return 0;}' | cc -o /dev/null -E -c -Kpic - 2>&1`"; then
           LDSHARE="-Wl,-B,dynamic";
           LDARC="-Wl,-B,static";
         else
           CFLAGS="$CFLAGS -Kpic";
         fi;
       fi;
       FFLAGS="$FFLAGS -PIC";
       IDL_LD="-L/usr/local/rsi/idl/bin/bin.solaris2.sparc -lidl"
       LIBPATH="LD_LIBRARY_PATH";
       FEXECLIBDIR="-L";
       SHARETYPE=".so";
       JVM="";
       jni_inc_dir="/usr/java/include";
       jni_md_inc_dir="/usr/java/include/solaris";
       HUP_TO_INETD="kill -HUP \`ps -e -o pid -o command | grep /usr/sbin/inetd | grep -v grep | awk '{print $1}'\`";;
alpha*-dec-osf*) CFLAGS="$CFLAGS -pthread -ieee";
       FFLAGS="$FFLAGS -pthread";
       GROFF_MAN_FLAGS="-t -mgan -Tascii";
       IDL_LD="-expect_unresolved 'IDL_*'"
       LDSHARE="-Wl,-so_archive ";
       LDARC="-Wl,-no_so ";
       LD_LDARC="-no_so ";
       LD_LDSHARE="-so_archive ";
       LINKSHARED="-shared ";
       LIBPATH="LD_LIBRARY_PATH";
       FOR_LDFLAGS="-lfor";
       FEXECLIBDIR="-L";
       MDSVME="mdsvme";
       SHARETYPE=".so";
       jni_inc_dir="/usr/include/java";
       jni_md_inc_dir="/usr/include/java/`uname -m`";
       HUP_TO_INETD="kill -HUP \`ps -e -o pid -o command | grep /usr/sbin/inetd | grep -v grep | awk '{print $1}'\`";;
*86*linux*) CFLAGS="$CFLAGS -fpic";
       CAMSHR="camshr";
       FFLAGS="$FFLAGS -fpic -Wno-globals -fno-backslash";
       LDSHARE="-Wl,-Bdynamic ";
       LDARC="-Wl,-Bstatic ";
       LD_LDSHARE="-Bdynamic ";
       LD_LDARC="-Bstatic ";
       FORLD="g77";
       LINKSHARED="-shared ";
       LIBPATH="LD_LIBRARY_PATH";
       FOR_LDFLAGS="";
       FEXECLIBDIR="-L";
       SHARETYPE=".so";
       TAR_EXCLUDE="--exclude";
       MITDEVICESIO_TARGETS="${MAKESHLIBDIR}libMitDevicesIO${SHARETYPE} ${MAKELIBDIR}libMitDevicesIO.a ${MAKEBINDIR}daq_server"; 
       jni_inc_dir="$jdk_dir/include";
       jni_md_inc_dir="$jdk_dir/include/linux";
       JVM="-L$jdk_dir/jre/lib/i386/client -ljvm -L$jdk_dir/jre/lib/i386  -ljava -L$jdk_dir/jre/lib/i386/native_threads -lhpi";
       HUP_TO_XINETD="/etc/rc.d/init.d/xinetd restart";
       HUP_TO_INETD="kill -HUP \`/sbin/pidof inetd\`";;
*linux*) CFLAGS="$CFLAGS -fpic";
       CAMSHR="camshr";
       FFLAGS="$FFLAGS -fpic -Wno-globals -fno-backslash";
       LDSHARE="-Wl,-Bdynamic ";
       LDARC="-Wl,-Bstatic ";
       LD_LDSHARE="-Bdynamic ";
       LD_LDARC="-Bstatic ";
       LINKSHARED="-shared ";
       LIBPATH="LD_LIBRARY_PATH";
       FOR_LDFLAGS="";
       FEXECLIBDIR="-L";
       SHARETYPE=".so";
       TAR_EXCLUDE="--exclude";
       jni_inc_dir="$jdk_dir/include";
       jni_md_inc_dir="$jdk_dir/include/linux";
       JVM="-L$jdk_dir/jre/lib/i386/client  -ljvm -L$jdk_dir/jre/lib/i386 -ljava -L$jdk_dir/jre/lib/i386/native_threads -lhpi";
       HUP_TO_XINETD="/etc/rc.d/init.d/xinetd restart";
       HUP_TO_INETD="kill -HUP \`/sbin/pidof inetd\`";;
*apple-darwin*) LD="$CC";
       CFLAGS="$CFLAGS -fno-common -no-cpp-precomp -dynamic -fPIC";
       if (test "$F77" = "f77"); then 
          FFLAGS="$FFLAGS -w -f -V -W"
       elif (test "$F77" = "g77"); then
          FFLAGS="$FFLAGS -fno-common -fno-backslash -Wno-globals";
          FOR_LDFLAGS="-lg2c"; 
       else 
          FFLAGS="$FFLAGS -!bs -p -fno-common -no-cpp-precomp";
          FOR_LDFLAGS="-lf2c";
       fi;
       FEXECLIBDIR="-L";
       LDSHARE="";
       LD_SHARE="";
       LDARC="";
       LD_ARC="";
       FOR_LDFLAGS="-lg2c";
dnl       LINKSHARED="-dynamiclib -install_name $libdir/\$(@F) -headerpad_max_install_names -prebind \
dnl          -seg_addr_table_filename \$(@F) -seg_addr_table ../macosx/bindtable";
       LINKSHARED="-dynamiclib -install_name $libdir/\$(@F) -headerpad_max_install_names -prebind \
          -seg_addr_table_filename \$(@F) -seg_addr_table ../macosx/bindtable -flat-namespace";
       LINKMODULE="-bundle -flat_namespace -undefined suppress";
       LINKJNI="-dynamiclib";
       SHARETYPE=".dylib";
       SHARETYPEJNI=".jnilib";
       SHARETYPEMOD=".so";
       LIBPTHREAD="";
       TAR_EXCLUDE="--exclude";
       jdk_dir="/System/Library/Frameworks/JavaVM.framework";
       jni_inc_dir="$jdk_dir/Headers";
       jni_md_inc_dir="$jni_inc_dir";
       JVM="-framework JavaVM";
       LIBPATH="DYLD_LIBRARY_PATH"
       HUP_TO_XINETD="killall -HUP xinetd";
       HUP_TO_INETD="killall -HUP inetd";;
*aix*) CFLAGS="$CFLAGS";
       FFLAGS="$FFLAGS";
       LDSHARE="";
       LDARC="";
       FOR_LDFLAGS="-lxlf90";
       LINKSHARED="-bnoentry -bM:SRE -bE:\$(EXPORTS)";
       LIBPATH="LIBPATH";
       MAKESHLIBDIR="\$(top_srcdir)/shlib/";
       EXPORTS_FILE="\$(EXPORTS)";
       FEXECLIBDIR="-L";
       SHARETYPE=".a";
       LOC="loc";
       HUP_TO_INETD="kill -HUP \`ps -e | grep inetd | grep -v grep | awk '{print $1}'\`";;
*windows*)     CFLAGS="$CFLAGS";
       LDSHARE="";
       LDARC="";
       LINKSHARED="";
       FEXECLIBDIR="-L";
       SHARETYPE="";;
*qnx*) CFLAGS="$CFLAGS -fpic";
       LDSHARE="-Wl,-Bdynamic ";
       LDARC="-Wl,-Bstatic ";
       LD_LDSHARE="-Bdynamic ";
       LD_LDARC="-Bstatic ";
       LINKSHARED="-shared ";
       LIBPATH="LD_LIBRARY_PATH";
       FOR_LDFLAGS="";
       FEXECLIBDIR="-L";
       SHARETYPE=".so";;
*)     CFLAGS="$CFLAGS";
       FFLAGS="$FFLAGS";
       FOR_LDFLAGS="";
       LDSHARE="";
       LDARC="";
       LINKSHARED="";
       LIBPATH="LD_LIBRARY_PATH";
       FEXECLIBDIR="-L";
       SHARETYPE=".so";;
esac

dnl see if we are going to build the dc1394_support devices
AC_MSG_CHECKING("libdb1394 - firewire camera support library")
AC_ARG_WITH(libdc1394,
	[  --with-libdc1394=location  compile the libdc1394 digital camera support stuff],
	LIBDC1394="$withval"
	if test "$LIBDC1394" = "yes"
	then
	  cat <<EOF
You need to provide the location of the libdc1394 software and include files

EOF
	  exit
        else
         echo "LIBDC1394 is /$LIBDC1394/"
	fi
        if test -d /usr/local/include/libraw1394/
	then
	  DC1394_SUPPORT="${MAKESHLIBDIR}libdc1394_support$SHARETYPE"
          echo "DC1394_SUPPORT=$DC1394_SUPPORT"
        else cat <<EOF
The libraw1394 package must be available on the sytem in order to compile and link the libdc1394
support code.  It can be gotten from : http://www.linux1394.org/  

libdc1394 support disabled.
EOF
	  DC1394_SUPPORT=""
	fi
	,
	DC1394_SUPPORT=""

)

dnl Checks for programs.
AC_PROG_RANLIB
AC_MSG_CHECKING(for ps sysv style arguments)
mdsplus_ok=`ps -ef >/dev/null 2>/dev/null`
if test $? = 0; then
		 AC_DEFINE(PS_SYSV)
		 mdsplus_ok=yes
else
		 mdsplus_ok=no
fi
AC_MSG_RESULT($mdsplus_ok)

dnl Define build directories

MAKEUIDDIR="\$(top_srcdir)/uid/"
MAKEETCDIR="\$(top_srcdir)/etc/"
MAKEJAVADIR="\$(top_srcdir)/java/"

if test "$MAKELIBDIR" = "$MAKESHLIBDIR"; then
	MAKESHLIBDIR_RULE=""
else
	MAKESHLIBDIR_RULE="$MAKESHLIBDIR : ; mkdir $MAKESHLIBDIR"
fi


dnl Check for 0xnnnnll (long long constants)
AC_LANG_SAVE
AC_LANG_C
AC_TRY_COMPILE(,int gub(){return((int)0x1ll);},AC_DEFINE(HAVE_LL_CONSTANTS))
AC_LANG_RESTORE

AC_MSG_CHECKING(if JNI libraries are different)
if test "$LINKJNI" 
then
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
	SHARETYPEJNI="$SHARETYPE"
        LINKJNI="$LINKSHARED"
fi

dnl Checks for libraries.

if test $IS_HP = 0; then
  AC_CHECK_LIB(c,printf)
fi
AC_CHECK_LIB(m,pow,LIBM="-lm",LIBM="")
AC_CHECK_LIB(resolv,__dn_skipname,LIBRESOLV="-lresolv",LIBRESOLV="")
AC_CHECK_LIB(dl,dlopen,LIBDL="-ldl",LIBDL="")
AC_CHECK_LIB(dld,shl_load,LIBDLD="-ldld",LIBDLD="")
AC_CHECK_LIB(c,gethostbyname,LIBNSL="",AC_CHECK_LIB(socket,gethostbyname,LIBNSL="-lsocket",AC_CHECK_LIB(nsl,gethostbyname,LIBNSL="-lnsl",LIBNSL="")))
AC_CHECK_LIB(c,socket,LIBSOCKET="",AC_CHECK_LIB(socket,socket,LIBSOCKET="-lsocket",LIBSOCKET=""))
AC_CHECK_LIB(dnet_stub,gethostbyname,DNET_STUB="-ldnet_stub",DNET_STUB="")
AC_CHECK_LIB(pthread,pthread_kill,LIBPTHREAD=$LIBPTHREAD,AC_CHECK_LIB(cma,pthread_create,LIBPTHREAD="-lcma",LIBPTHREAD=""))
AC_CHECK_LIB(exc,__Ots_CSpecificHandler,LIBPTHREAD="$LIBPTHREAD -lexc")
AC_CHECK_LIB(pthread,pthread_lock_global_np,AC_DEFINE(HAVE_PTHREAD_LOCK_GLOBAL_NP))
AC_CHECK_LIB(pthread,__pthread_lock_global_np,AC_DEFINE(HAVE_PTHREAD_LOCK_GLOBAL_NP))
AC_CHECK_LIB(pthread,pthread_mutexattr_settype,AC_DEFINE(HAVE_PTHREAD_MUTEXATTR_SETTYPE))
AC_CHECK_LIB(pthread,pthread_mutexattr_setkind_np,AC_DEFINE(HAVE_PTHREAD_MUTEXATTR_SETKIND))
AC_CHECK_LIB(readline,readline,LIBREADLINE="-lreadline -lcurses",LIBREADLINE="",-lcurses)

AC_ARG_ENABLE(d3d,
	[  --enable-d3d            build d3d ptdata access library ],
	if test "$enableval" = yes; then
          AC_MSG_CHECKING(...D3DLIB_PATH...)
          : ${D3DLIB_PATH:?"You must define D3DLIB_PATH to be the directory containing the libd3 library"}
          if test -r "$D3DLIB_PATH/libd3.a" -o -r "$D3DLIB_PATH/libd3$SHARETYPE"
          then
		 D3D_PACKAGE="\$(D3D_PACKAGE)";
		 D3DLIB="-L$D3DLIB_PATH";
                 AC_MSG_RESULT($D3DLIB)
          else
		 AC_MSG_RESULT(libd3.a or libd3$SHARETYPE not found in $D3DLIB_PATH)
                 exit 0
          fi
        fi)

AC_ARG_ENABLE(staticmotif,
	[  --enable-staticmotif    build with static motif libraries ],
        if test "$enableval" = yes; then
          MOTIF_LDARC=$LDARC;
          MOTIF_LDSHARE="$LDSHARE";
          MOTIF_LD_LDARC=$LD_LDARC;
          MOTIF_LD_LDSHARE="$LD_LDSHARE";
        else
          MOTIF_LDARC="";
          MOTIF_LDSHARE="";
          MOTIF_LD_LDARC="";
          MOTIF_LD_LDSHARE="";
        fi)
  
dnl Checks for header files.
AC_CHECK_HEADERS(stdarg.h fcntl.h strings.h sys/ioctl.h syslog.h unistd.h sys/filio.h netdb.h resolv.h)
AC_CHECK_HEADERS(dlfcn.h dl.h vxWorks.h windows.h sys/resource.h readline/readline.h)
AC_CHECK_HEADERS(malloc.h)

dnl Check for default hdf5 header and library
HDF5_APS=""
AC_CHECK_HEADERS(hdf5.h,DO_HDF5="yes")
if test "$DO_HDF5" = yes; then
  AC_CHECK_LIB(hdf5,H5Fopen,DO_HDF5="yes",DO_HDF5="no")
  if test "$DO_HDF5" = yes; then
    HDF5_APS="\$(HDF5_APS)"
    HDF5_INCS=""
    HDF5_LIBS=""
  fi
fi

dnl Check for user specified  hdf5 header and library
if test -n "$HDF5_DIR" -a -r $HDF5_DIR
then
      HDF5_APS="\$(HDF5_APS)"
      HDF5_INCS="-I$HDF5_DIR/include"
      HDF5_LIBS="-L$HDF5_DIR/lib"
fi	

dnl Check for jdk files
AC_CHECK_FILE($jni_inc_dir/jni.h,JDK_CFLAGS="-I$jni_inc_dir")
AC_CHECK_FILE($jni_md_inc_dir/jni_md.h,JDK_CFLAGS="$JDK_CFLAGS -I$jni_md_inc_dir")
if test "$JDK_CFLAGS"
then
  JAVA_APS="\$(JAVA_APS)"
else
  JAVA_APS=""
fi

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_HEADER_TIME
AC_STRUCT_TM
AC_TYPE_SIGNAL
AC_TYPE_SIZE_T

dnl Check if we are missing <sys/sem.h> but can use <semaphore.h> API instead
AC_MSG_CHECKING([if we should use named semaphores])
AC_TRY_CPP([ #include <sys/sem.h> ] , namedsem=no, namedsem=yes )
if test "$namedsem" = yes; then
AC_TRY_CPP([ #include <semaphore.h> ], 
  [AC_DEFINE(USE_SEMAPHORE_H) namedsem=yes], 
   namedsem=no)
fi
AC_MSG_RESULT([ $namedsem])

dnl Check if we want to try Named Pipes instead of <sys/msg.h> API
AC_CHECK_HEADERS(sys/msg.h,mdsplus_ok=no,mdsplus_ok=yes)
if test "$mdsplus_ok" = yes; then
   AC_CHECK_HEADERS(sys/stat.h, mdsplus_ok=yes, mdsplus_ok=no)
   AC_MSG_CHECKING(if we should use pipes for messaging)
   if test "$mdsplus_ok" = yes; then
        AC_DEFINE(USE_PIPED_MESSAGING)
        AC_MSG_RESULT($mdsplus_ok)
    fi
fi

#AC_CACHE_CHECK([for timezone and daylight externals], mdsplus_cv_have_timezone, 
#    AC_TRY_LINK([#include <time.h>], [long z2 = timezone - daylight*3600;], 
#        mdsplus_cv_have_timezone=yes, mdsplus_cv_have_timezone=no))
#    if test "$mdsplus_cv_have_timezone" = yes; then
#        AC_DEFINE(HAVE_TIMEZONE)
#    else
#        AC_CACHE_CHECK([for tm_gmtoff in struct tm], mdsplus_cv_tm_gmtoff_in_tm,
#            AC_TRY_LINK([#include <time.h>], [struct tm tim; tim.tm_gmtoff = 0;],
#            mdsplus_cv_tm_gmtoff_in_tm=yes,mdsplus_cv_tm_gmtoff_in_tm=no))
#    fi
#    if test "$mdsplus_cv_tm_gmtoff_in_tm" = yes; then
#        AC_DEFINE(USE_TM_GMTOFF)
#    fi
AC_CACHE_CHECK([for tm_gmtoff in struct tm], mdsplus_cv_tm_gmtoff_in_tm,
     AC_TRY_LINK([#include <time.h>], [struct tm tim; tim.tm_gmtoff = 0;],
         mdsplus_cv_tm_gmtoff_in_tm=yes,mdsplus_cv_tm_gmtoff_in_tm=no))
     if test "$mdsplus_cv_tm_gmtoff_in_tm" = yes; then
        AC_DEFINE(USE_TM_GMTOFF)
     else
       AC_CACHE_CHECK([for timezone and daylight externals], mdsplus_cv_have_timezone, 
          AC_TRY_LINK([#include <time.h>], [long z2 = timezone - daylight*3600;], 
             mdsplus_cv_have_timezone=yes, mdsplus_cv_have_timezone=no))
          if test "$mdsplus_cv_have_timezone" = yes; then
            AC_DEFINE(HAVE_TIMEZONE)
          fi
     fi

AC_MSG_CHECKING(for semun union declaration)
AC_TRY_COMPILE([#include <sys/types.h>
#include <sys/sem.h>],[union semun arg;],
							 mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = no; then
		 AC_DEFINE(NEED_SEMUN)
fi
AC_MSG_RESULT($mdsplus_ok)

AC_MSG_CHECKING(for sigvec structure declaration)
AC_TRY_COMPILE([#include <signal.h>],[struct sigvec arg;],
							 mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = no; then
		 AC_DEFINE(NEED_SIGVEC)
fi
AC_MSG_RESULT($mdsplus_ok)

AC_MSG_CHECKING(whether we need to type shmat)
AC_TRY_COMPILE([#include <sys/shm.h>],[char *shmat();],
							 mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = yes; then
		 AC_DEFINE(TYPE_SHMAT)
fi
AC_MSG_RESULT($mdsplus_ok)

AC_MSG_CHECKING(for two byte fd in *FILE)
AC_EGREP_HEADER(_fileL,stdio.h,mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = yes; then
		 AC_DEFINE(FILE_PTR_HL)
fi
AC_MSG_RESULT($mdsplus_ok)

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_HEADER_STDC
AC_CHECK_FUNCS(gethostname gettimeofday select socket)
AC_CHECK_FUNCS(sigvec sigvector)
AC_CHECK_FUNC(malloc)
AC_CHECK_FUNC(nis_local_host,mdsplus_ok=yes,mdsplus_ok=no)
AC_CHECK_FUNC(malloc)
if test $mdsplus_ok = yes; then
		 AC_DEFINE(USE_NIS)
fi

dnl Check for Sybase
AC_MSG_CHECKING(for SYBASE open/client)
: ${SYBASE=/usr/local/sybase}
if test -r "$SYBASE/lib/libsybdb.a" 
then 
        SYBASE_INC="-I$SYBASE/include -DSYBASE"
        SYBASE_LIB="-L$SYBASE/lib $LD_LDARC -lsybdb $LD_LDSHARE"
	SYBASE="SYBASE"
        AC_MSG_RESULT(have sybase open/client)
else
        SYBASE_INC=""
        SYBASE_LIB=""
	SYBASE=""
        AC_MSG_RESULT(no sybase open/client)
fi

dnl Check for Idl
AC_MSG_CHECKING(for idl)
IDL_DIR="/usr/local/rsi/idl"
if test -r $IDL_DIR
then
        IDL_INC="-I$IDL_DIR/external"
        IDL_LIB=$IDL_LD
        IDLMDSEVENT="idlmdsevent"
	IDLMDSWIDGETS="idlmdswidgets"
        AC_MSG_RESULT(have idl $IDL_INC)
else
        IDL_INC=""
        IDL_LIB=""
        IDLMDSEVENT=""
        AC_MSG_RESULT(no idl)
fi

AC_MSG_CHECKING(if idlsql should be built)
if test -n "$SYBASE_INC" -a -n "$IDL_INC"
then
        IDLSQL="idlsql"
        AC_MSG_RESULT(have both idl and sql so yes.)
else
        IDLSQL=""
        AC_MSG_RESULT(missing at least one of idl and sql so no.)
fi

AC_MSG_CHECKING(if mdssql should be built)
if test -n "$SYBASE_INC"
then
        MDSSQL="mdssql"
        AC_MSG_RESULT(have sql so yes.)
else
        IDLSQL=""
        AC_MSG_RESULT(missing sql so no.)
fi

AC_DEFINE_UNQUOTED(SHARELIB_TYPE,"${SHARETYPE}")
AC_C_BIGENDIAN
AC_C_CHAR_UNSIGNED
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(_int64)
AC_PATH_XTRA
AC_PATH_PROG(UIL,uil,uil,$UILPATH:/usr/bin/X11:$PATH:/usr/dt/bin)
AC_PATH_PROG(JAVAC,javac,javac)
AC_PATH_PROG(JAR,jar,jar)
XM_LIBS="-lMrm -lXm"
if test "$X_CFLAGS"
then
	X_CFLAGS="$X_CFLAGS -D_NO_DXm"
else
	X_CFLAGS=-D_NO_DXm
fi
LDFLAGS="$X_LIBS"
AC_CHECK_LIB(Xext,XextAddDisplay,LIBXEXT="-lXext",LIBXEXT="")
LDFLAGS="$X_LIBS $LIBXEXT"
AC_CHECK_LIB(Xp,XpGetDocumentData,LIBXP="-lXp",LIBXP="")
LDFLAGS=""

AC_DEFINE_UNQUOTED(TARGET_OS,${target_os})
AC_DEFINE_UNQUOTED(TARGET_CPU,${target_cpu})
AC_DEFINE_UNQUOTED(TARGET_VENDOR,${target_vendor})

LIBS="$LIBPTHREAD $LIBS"

AC_SUBST(CAMSHR)
AC_SUBST(D3D_PACKAGE)
AC_SUBST(D3DLIB)
AC_SUBST(D3D_FFLAGS)
AC_SUBST(DNET_STUB)
AC_SUBST(EXPORTS_FILE)
AC_SUBST(FEXECLIBDIR)
AC_SUBST(FORLD)
AC_SUBST(FOR_LDFLAGS)
AC_SUBST(GLOBUS_CFLAGS)
AC_SUBST(GLOBUS_FLAVOR)
AC_SUBST(GLOBUS_LIBS)
AC_SUBST(GLOBUS_LOCATION)
AC_SUBST(GROFF)
AC_SUBST(GROFF_MAN_FLAGS)
AC_SUBST(HDF5_INCS)
AC_SUBST(HDF5_LIBS)
AC_SUBST(HDF5_APS)
AC_SUBST(HUP_TO_INETD)
AC_SUBST(HUP_TO_XINETD)
AC_SUBST(IDL_INC)
AC_SUBST(IDL_LIB)
AC_SUBST(IDLMDSEVENT)
AC_SUBST(IDLMDSWIDGETS)
AC_SUBST(IDLSQL)
AC_SUBST(JAR)
AC_SUBST(JAVAC)
AC_SUBST(JAVA_APS)
AC_SUBST(JDK_CFLAGS)
AC_SUBST(JVM)
AC_SUBST(LD)
AC_SUBST(LDSHARE)
AC_SUBST(LDARC)
AC_SUBST(LD_LDSHARE)
AC_SUBST(LD_LDARC)
AC_SUBST(LIBDL)
AC_SUBST(LIBDLD)
AC_SUBST(LIBM)
AC_SUBST(LIBNSL)
AC_SUBST(LIBPATH)
AC_SUBST(LIBPTHREAD)
AC_SUBST(LIBREADLINE)
AC_SUBST(LIBRESOLV)
AC_SUBST(LIBSOCKET)
AC_SUBST(LIBXP)
AC_SUBST(LIBXEXT)
AC_SUBST(LINKSHARED)
AC_SUBST(LINKJNI)
AC_SUBST(LINKMODULE)
AC_SUBST(LOC)
AC_SUBST(MAKEBINDIR)
AC_SUBST(MAKELIBDIR)
AC_SUBST(MAKESHLIBDIR)
AC_SUBST(MAKESHLIBDIR_RULE)
AC_SUBST(MAKEUIDDIR)
AC_SUBST(MAKEETCDIR)
AC_SUBST(MAKEJAVADIR)
AC_SUBST(MDSSQL)
AC_SUBST(MDSTCPIP)
AC_SUBST(MDSVME)
AC_SUBST(MEMCHKLIB)
AC_SUBST(MITDEVICESIO_TARGETS)
AC_SUBST(MOTIF_LDSHARE)
AC_SUBST(MOTIF_LDARC)
AC_SUBST(MOTIF_LD_LDSHARE)
AC_SUBST(MOTIF_LD_LDARC)
AC_SUBST(NEED_SEMUN)
AC_SUBST(RANLIB)
AC_SUBST(SHARETYPE)
AC_SUBST(SHARETYPEJNI)
AC_SUBST(SHARETYPEMOD)
AC_SUBST(SIZEOF_INT_P)
AC_SUBST(SYBASE_INC)
AC_SUBST(SYBASE_LIB)
AC_SUBST(host)
AC_SUBST(TARGETSYS)
AC_SUBST(TAR_EXCLUDE)
AC_SUBST(UIL)
AC_SUBST(X_CFLAGS)
AC_SUBST(X_LIBS)
AC_SUBST(X_EXTRA_LIBS)
AC_SUBST(X_PRE_LIBS)
AC_SUBST(XM_LIBS)
AC_SUBST(uiddir)
AC_SUBST(USE_SEMAPHORE_H)
AC_SUBST(USE_PIPED_MESSAGING)
AC_SUBST(USE_TM_GMTOFF)
AC_SUBST(LIBDC1394)
AC_SUBST(DC1394_SUPPORT)
AC_OUTPUT(Makefile
envsyms
actions/Makefile 
camshr/Makefile
ccl/Makefile 
cdu/Makefile 
d3dshr/Makefile 
dwscope/Makefile 
gen_device/Makefile
hdf5/Makefile
idlmdsevent/Makefile
idlmdswidgets/Makefile
idlsql/Makefile
javaclient/Makefile
javadispatcher/Makefile
javamds/Makefile 
javascope/Makefile
javatraverser/Makefile
manpages/Makefile
math/Makefile 
math/csint.f 
math/dsvrgn.f
math/svign.f
math/svrgn.f
math/umach.f 
mdsdcl/Makefile 
mdsjet/Makefile
mdsip_xio/Makefile
mdslib/Makefile 
mdslibidl/Makefile 
mdsmisc/Makefile
mdsshr/Makefile 
mdssql/Makefile
mdstcpip/Makefile 
mdsvme/Makefile
mitdevices/Makefile 
remcam/Makefile 
rpm/Makefile
rpm/envsyms
rpm/post_install_script
scripts/Makefile
servershr/Makefile 
setevent/Makefile
tcl/Makefile 
tdishr/Makefile 
tdic/Makefile
tditest/Makefile 
traverser/Makefile 
treeshr/Makefile 
wfevent/Makefile 
xmdsshr/Makefile 
)
AC_OUTPUT_COMMANDS(make depend)
