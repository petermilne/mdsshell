module L8212_UIL
    names = case_sensitive

include file "XmdsWidgets.uil";

object
    L8212: XmBulletinBoardDialog 
        {
        arguments
            {
            XmNx = 0;
            XmNy = 0;
            XmNborderWidth = 1;
            XmNresizePolicy = XmRESIZE_ANY;
            XmNdialogTitle = 
            compound_string("Lecroy Model 8212 12-Bit Transient Digitizer");
            XmNheight = 500;
            };
        controls
            {
            XmLabelGadget 
                {
                arguments
                    {
                    XmNx = 23;
                    XmNy = 17;
                    XmNlabelString = 
                    compound_string("CAMAC name:");
                    };
                };
            XmLabelGadget 
                {
                arguments
                    {
                    XmNx = 24;
                    XmNy = 47;
                    XmNlabelString = 
                    compound_string("Comment:");
                    };
                };
            XmLabelGadget Trigger;
            user_defined procedure XmdsCreateExprField 
                {
                arguments
                    {
                    XmNx = 131;
                    XmNy = 15;
                    XmNcolumns = 47;
                    XmNmarginHeight = 1;
                    XmNmarginWidth = 1;
                    XmdsNautoQuote = true;
                    XmdsNdefaultQuote = true;
                    XmdsNnid = DEVICE_NID;
                    XmdsNnidOffset = L8212$N_NAME;
                    XmNwidth = 350;
                    };
                };
            user_defined procedure XmdsCreateExprField 
                {
                arguments
                    {
                    XmNx = 130;
                    XmNy = 43;
                    XmNcolumns = 47;
                    XmNmarginHeight = 1;
                    XmNmarginWidth = 1;
                    XmdsNautoQuote = true;
                    XmdsNdefaultQuote = true;
                    XmdsNnid = DEVICE_NID;
                    XmdsNnidOffset = L8212$N_COMMENT;
                    XmNwidth = 350;
                    };
                };
            user_defined procedure XmdsCreateExprField 
                {
                arguments
                    {
                    XmNx = 119;
                    XmNy = 108;
                    XmNcolumns = 47;
                    XmNmarginHeight = 1;
                    XmNmarginWidth = 1;
                    XmdsNnid = DEVICE_NID;
                    XmdsNnidOffset = L8212$N_STOP_TRIG;
                    XmNwidth = 350;
                    };
                };
            unmanaged user_defined external_clock;
            user_defined procedure XmdsCreateNidOptionMenu 
                {
                arguments
                    {
                    XmNx = 405;
                    XmNy = 151;
                    XmdsNnidOffset = L8212$N_OFFSET;
                    XmdsNlabelStrings = string_table(
                        compound_string("Unipolar +"),
                        compound_string("Bipolar"),
                        compound_string("Unipolar -"));
                    XmdsNnid = DEVICE_NID;
                    XmdsNvalueStrings = string_table(
                        compound_string("0"),
                        compound_string("-2048"),
                        compound_string("-4096"));
                    XmNlabelString = 
                    compound_string("Range:");
                    };
                };
            mems_scale: XmScale 
                {
                arguments
                    {
                    XmNx = 101;
                    XmNy = 145;
                    XmNwidth = 126;
                    XmNmaximum = 12;
                    XmNminimum = 1;
                    XmNorientation = XmHORIZONTAL;
                    XmNshowValue = true;
	            XmNuserData = mems_nid;
                    };
                callbacks
                    {
                    XmNvalueChangedCallback = procedures
                        {
                        mems_changed_proc();
                        };
                    };
                };
            XmLabelGadget 
                {
                arguments
                    {
                    XmNx = 22;
                    XmNy = 155;
                    XmNlabelString = 
                    compound_string("Memories:");
                    };
                };
            user_defined procedure XmdsCreateOkButton 
                {
                arguments
                    {
                    XmNx = 24;
                    XmNy = 452;
                    };
                callbacks
                    {
                    XmNactivateCallback = procedures
                        {
                        apply_proc();
                        };
                    };
                };
            user_defined procedure XmdsCreateResetButton 
                {
                arguments
                    {
                    XmNx = 310;
                    XmNy = 453;
                    };
                callbacks
                    {
                    XmNactivateCallback = procedures
                        {
                        reset_proc();
                        };
                    };
                };
            user_defined procedure XmdsCreateApplyButton 
                {
                arguments
                    {
                    XmNx = 166;
                    XmNy = 452;
                    };
                callbacks
                    {
                    XmNactivateCallback = procedures
                        {
                        apply_proc();
                        };
                    };
                };
            user_defined procedure XmdsCreateCancelButton 
                {
                arguments
                    {
                    XmNx = 486;
                    XmNy = 452;
                    };
                };
            header_menu : user_defined procedure XmdsCreateNidOptionMenu 
                {
                arguments
                    {
                    XmNx = 24;
                    XmNy = 186;
                    XmdsNnidOffset = L8212$N_HEADER;
                    XmNwidth = 25;
                    XmNheight = 25;
                    XmNlabelString = 
                    compound_string("Header");
                    XmdsNnid = DEVICE_NID;
                    XmdsNlabelStrings = l8212_header_names;
                    XmdsNvalueStrings = l8212_header_values;
                    };
                callbacks
                    {
                    XmNentryCallback = procedures
                        {
                        header_changed_proc();
                        };
                    };
                };
            pts_menu : user_defined procedure XmdsCreateNidOptionMenu 
                {
                arguments
                    {
                    XmNx = 336;
                    XmNy = 189;
                    XmdsNnidOffset = L8212$N_PTS;
                    XmNwidth = 25;
                    XmNheight = 25;
                    XmNlabelString = 
                    compound_string("Post Trigger (pts):");
                    XmdsNlabelStrings = string_table(
                        compound_string("0"),
                        compound_string("1"),
                        compound_string("2"),
                        compound_string("3"),
                        compound_string("4"),
                        compound_string("5"),
                        compound_string("6"),
                        compound_string("7"));
                    XmdsNnid = DEVICE_NID;
                    XmdsNvalueStrings = string_table(
                        compound_string("0BU"),
                        compound_string("1BU"),
                        compound_string("2BU"),
                        compound_string("3BU"),
                        compound_string("4BU"),
                        compound_string("5BU"),
                        compound_string("6BU"),
                        compound_string("7BU"));
                    };
                };
            user_defined procedure XmdsCreateXdBoxOnOffButton 
                {
                arguments
                    {
                    XmNx = 27;
                    XmNy = 411;
                    XmdsNnidOffset = L8212$N_INIT;
                    XmNlabelString = 
                    compound_string("Init Action");
                    XmdsNnid = DEVICE_NID;
                    };
                };
            user_defined procedure XmdsCreateXdBoxOnOffButton 
                {
                arguments
                    {
                    XmNx = 290;
                    XmNy = 410;
                    XmdsNnidOffset = L8212$N_STORE;
                    XmNlabelString = 
                    compound_string("Store Action");
                    XmdsNnid = DEVICE_NID;
                    };
                };
            user_defined procedure XmdsCreateDigChans 
		{
		arguments
		    {
		    XmNx = 17;
		    XmNy = 228;
		    XmdsNchannels = num_channels;
		    XmdsNdataNidOffset = L8212$N_CHAN_DATA;
		    XmdsNendIdxNidOffset = L8212$N_CHAN_ENDIDX;
		    XmdsNnid = DEVICE_NID;
		    XmdsNnidOffset = L8212$N_CHANNELS;
		    XmdsNnodesPerChannel = L8212$K_NODES_PER_CHAN;
		    XmdsNstartIdxNidOffset = L8212$N_CHAN_STARTIDX;
		    XmNwidth = 535;
		    };
		};
	    user_defined chans_menu; 
	    user_defined clock_menu;
            };
        };
    chans_menu : user_defined procedure XmdsCreateNidOptionMenu 
	{
	arguments
	    {
	    XmNx = 233;
	    XmNy = 154;
	    XmdsNnidOffset = L8212$N_NOC;
	    XmdsNlabelStrings = chan_strings;
	    XmdsNnid = DEVICE_NID;
	    XmdsNvalueStrings = chan_vals;
	    XmNlabelString = compound_string("Chans:");
	    };
	callbacks
	    {
	    XmNentryCallback = procedures
                 {
                 chans_changed_proc();
                 };
             };
	};
    clock_menu : user_defined procedure XmdsCreateNidOptionMenu 
 	{
        arguments
            {
            XmNx = 21;
            XmNy = 72;
            XmdsNnidOffset = L8212$N_FREQ;
            XmdsNlabelStrings = clock_strings;
            XmdsNnid = DEVICE_NID;
            XmdsNvalueStrings = clock_vals;
            XmNlabelString = 
            compound_string("Clock:");
            };
        callbacks
            {
            XmNentryCallback = procedures
                {
                    clock_changed_proc();
                };
            };
        };
    Trigger: XmLabelGadget 
        {
        arguments
            {
            XmNx = 24;
            XmNy = 111;
            XmNlabelString = 
            compound_string("Trigger:");
            };
        };
    external_clock: user_defined procedure XmdsCreateExprField 
        {
        arguments
            {
            XmNx = 216;
            XmNy = 76;
            XmNcolumns = 30;
            XmNmarginHeight = 1;
            XmNmarginWidth = 1;
            XmdsNautoQuote = false;
            XmdsNdefaultQuote = false;
            XmdsNnid = DEVICE_NID;
            XmdsNnidOffset = L8212$N_EXT_CLOCK;
            };
        };

value
    L8212$K_CONG_HEADER_NODES: 13;
    L8212$N_HEAD: 0;
    L8212$N_NAME: 1;
    L8212$N_COMMENT: 2;
    L8212$N_FREQ: 3;
    L8212$N_EXT_CLOCK: 4;
    L8212$N_STOP_TRIG: 5;
    L8212$N_MEMORIES: 6;
    L8212$N_HEADER: 7;
    L8212$N_PTS: 8;
    L8212$N_NOC: 9;
    L8212$N_OFFSET: 10;
    L8212$N_INIT: 11;
    L8212$N_STORE: 12;
    L8212$N_CHANNELS: 13;
    L8212$K_NODES_PER_CHAN: 3;
    L8212$N_CHAN_HEAD: 0;
    L8212$N_CHAN_DATA: 0;
    L8212$N_CHAN_STARTIDX: 1;
    L8212$N_CHAN_ENDIDX: 2;
    L8212$K_MAX_CHANS: 32;
    DEVICE_NID: -1;

    l8212_header_names : imported string_table;
    l8212_header_values : imported string_table;

    identifier mems_nid;
    identifier num_channels;
    identifier chan_vals;
    identifier chan_strings;
    identifier clock_strings;
    identifier clock_vals;

procedure
    clock_changed_proc();
    chans_changed_proc();
    mems_changed_proc();
    header_changed_proc();
    apply_proc();
    reset_proc();
end module;
