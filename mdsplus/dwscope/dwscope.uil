module scope_uil
    names = case_sensitive
    version = 
    "v1.0"
    objects =
        {
        XmSeparator = gadget;
        XmToggleButton = gadget;
        XmPushButton = gadget;
        XmLabel = gadget;
        XmCascadeButton = gadget;
        }

include file "XmdsWidgets.uil";

identifier
    Button3Widget ;
    CustomizeWindowWidget ;
    CustomizePrintWidget ;
    CustomizeFontWidget ;
    DataSetupWidget ;
    DefaultsSetupWidget ;

value
    USE_DIALOG: 0;
    USE_DEFAULT: 1;
    POPUP_DIALOG: 2;
    USE_DEFAULT_SNAPSHOT: 4;
    POPUP_SNAPSHOT_DIALOG: 5;

procedure
    Align;
    InitializeCustomizePrint;
    ApplyCustomizePrint;
    ApplyCustomizeWindow;
    ApplyDataSetup(integer);
    ApplyFont;
    ApplyOverride;
    Autoscale(string);
    Clear;
    Close;
    Crosshairs;
    CreateCustomizeFont;
    Cut;
    DisableGlobalDefault(string);
    Exit;
    InitDefaultsSetupWidget;
    Ok;
    OkFont;
    Paste;
    Print;
    PrintAll;
    Refresh;
    RegisterPane;
    RegisterSash;
    RegisterWave;
    ResetCustomizeFont;
    ResetCustomizePrint;
    ResetCustomizeWindow;
    ResetDataSetup(integer);
    Restore(integer);
    Save(integer);
    SetDirMask(any);
    DisplayHelp(string);
    SetPointerMode;
    SetPointerModeMenu;
    expand_reset(integer);
    expand_ok;
    expand_cancel;
    Updates;
    UpdatesMenuButton;
    GridStyle;

object
    scope: XmMainWindow 
        {
        arguments
            {
            XmNborderWidth = 0;
            XmNcommandWindow = XmRowColumn pointer_controls;
            XmNworkWindow = XmForm plots;
            XmNcommandWindowLocation = XmCOMMAND_BELOW_WORKSPACE;
            };
        controls
            {
            XmMenuBar 
                {
                arguments
                    {
                    XmNorientation = XmHORIZONTAL;
                    XmNisAligned = false;
                    XmNpacking = XmPACK_TIGHT;
                    XmNmenuHelpWidget = XmCascadeButton help_pulldown_entry;
                    };
                controls
                    {
                    XmCascadeButton 
                        {
                        arguments
                            {
                            XmNlabelString = 
                            compound_string("File");
                            XmNmnemonic = keysym("F");
                            };
                        controls
                            {
                            XmPulldownMenu file_pulldown;
                            };
                        callbacks
                            {
                            XmNhelpCallback = procedures
                                {
                                DisplayHelp(
                                "Scope Menus File");
                                };
                            };
                        };
                    XmCascadeButton 
                        {
                        arguments
                            {
                            XmNlabelString = 
                            compound_string("Pointer Mode");
                            XmNmnemonic = keysym("M");
                            };
                        controls
                            {
                            XmPulldownMenu pointer_pulldown;
                            };
                        callbacks
                            {
                            XmNhelpCallback = procedures
                                {
                                DisplayHelp(
                                "Scope Menus Pointer_Mode");
                                };
                            };
                        };
                    XmCascadeButton 
                        {
                        arguments
                            {
                            XmNlabelString = 
                            compound_string("Print");
                            XmNmnemonic = keysym("P");
                            };
                        controls
                            {
                            XmPulldownMenu print_all_pulldown;
                            };
                        callbacks
                            {
                            XmNhelpCallback = procedures
                                {
                                DisplayHelp(
                                "Scope Menus Print");
                                };
                            };
                        };
                    XmCascadeButton 
                        {
                        arguments
                            {
                            XmNlabelString = 
                            compound_string("Customize");
                            XmNmnemonic = keysym("s");
                            };
                        controls
                            {
                            XmPulldownMenu customize_pulldown;
                            };
                        callbacks
                            {
                            XmNhelpCallback = procedures
                                {
                                DisplayHelp(
                                "Scope Menus Customize");
                                };
                            };
                        };
                    XmCascadeButton help_pulldown_entry;
                    XmCascadeButtonGadget 
                        {
                        arguments
                            {
                            XmNlabelString = 
                            compound_string("Updates");
                            XmNmnemonic = keysym("U");
                            };
                        controls
                            {
                            XmPulldownMenu 
                                {
                                arguments
                                    {
                                    XmNborderWidth = 1;
                                    };
                                controls
                                    {
                                    XmToggleButtonGadget updates_menu;
                                    XmToggleButtonGadget disable_icon_updates;
                                    };
                                };
                            };
                        };
                    XmCascadeButtonGadget 
                        {
                        arguments
                            {
                            XmNx = 336;
                            XmNy = 9;
                            XmNlabelString = 
                            compound_string("Autoscale");
                            XmNmnemonic = keysym("A");
                            };
                        controls
                            {
                            XmPulldownMenu 
                                {
                                arguments
                                    {
                                    XmNx = 6;
                                    XmNy = 11;
                                    XmNborderWidth = 1;
                                    };
                                controls
                                    {
                                    XmPushButtonGadget 
                                        {
                                        arguments
                                            {
                                            XmNlabelString = 
                                            compound_string("All");
                                            XmNmnemonic = keysym("A");
                                            XmNaccelerator = 
                                            "Alt<Key>b:";
                                            XmNacceleratorText = 
                                            compound_string("Alt/B");
                                            };
                                        callbacks
                                            {
                                            XmNactivateCallback = procedures
                                                {
                                                Autoscale(
                                                "B");
                                                };
                                            };
                                        };
                                    XmPushButtonGadget 
                                        {
                                        arguments
                                            {
                                            XmNlabelString = 
                                            compound_string("All Y");
                                            XmNaccelerator = 
                                            "Alt<Key>y:";
                                            XmNacceleratorText = 
                                            compound_string("Alt/Y");
                                            XmNmnemonic = keysym("Y");
                                            };
                                        callbacks
                                            {
                                            XmNactivateCallback = procedures
                                                {
                                                Autoscale(
                                                "Y");
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                callbacks
                    {
                    XmNhelpCallback = procedures
                        {
                        DisplayHelp(
                        "Scope Menus");
                        };
                    };
                };
            XmRowColumn pointer_controls;
            XmForm plots;
            unmanaged XmFileSelectionDialog file_dialog;
            unmanaged XmFormDialog 
                {
                arguments
                    {
                    XmNdefaultButton = XmPushButton cw_ok_button;
                    XmNhorizontalSpacing = 2;
                    XmNverticalSpacing = 2;
                    XmNdefaultPosition = true;
                    XmNrubberPositioning = true;
                    XmNdialogStyle = XmDIALOG_MODELESS;
                    XmNautoUnmanage = false;
                    XmNdialogTitle = 
                    compound_string("Customize Window");
                    XmNnoResize = true;
                    };
                controls
                    {
                    XmLabel rows_in_column;
                    XmScale rows_1;
                    XmScale rows_2;
                    XmScale rows_3;
                    XmScale rows_4;
                    XmLabel window_title_label;
                    XmLabel icon_name_label;
                    XmLabel title_event_label;
                    XmText window_title;
                    XmText icon_name;
                    XmText title_event;
                    XmPushButton cw_ok_button;
                    XmPushButton cw_apply_button;
                    XmPushButton cw_cancel_button;
                    };
                callbacks
                    {
                    MrmNcreateCallback = procedures
                        {
                        XmdsRegisterWidgetCallback(CustomizeWindowWidget);
                        };
                    XmNhelpCallback = procedures
                        {
                        DisplayHelp(
                        "Scope Menus Customize Window");
                        };
                    };
                };
            unmanaged XmFormDialog 
                {
                arguments
                    {
                    XmNdefaultButton = XmPushButton cp_ok_button;
                    XmNhorizontalSpacing = 2;
                    XmNverticalSpacing = 2;
                    XmNdefaultPosition = true;
                    XmNrubberPositioning = true;
                    XmNdialogStyle = XmDIALOG_MODELESS;
                    XmNautoUnmanage = false;
                    XmNdialogTitle = 
                    compound_string("Customize Printer Settings");
                    XmNnoResize = true;
                    };
                controls
                    {
                    XmLabel printer_select_label;
                    XmOptionMenu printer_select;
                    XmLabel print_file_label;
                    XmText print_file;
                    XmToggleButton cp_portrait_button;
                    XmLabel print_event_label;
                    XmText print_event;
                    XmToggleButton print_window_title;
                    XmPushButton cp_ok_button;
                    XmPushButton cp_apply_button;
                    XmPushButton cp_cancel_button;
                    };
                callbacks
                    {
                    MrmNcreateCallback = procedures
                        {
                        XmdsRegisterWidgetCallback(CustomizePrintWidget);
!                        InitializeCustomizePrint();
                        };
                    XmNhelpCallback = procedures
                        {
                        DisplayHelp(
                        "Scope Menus Customize Print");
                        };
                    };
                };
            unmanaged XmFormDialog data_setup_db;
            unmanaged XmBulletinBoardDialog defaults_setup_db;
            unmanaged XmFormDialog expand_dialog;
            unmanaged XmSelectionDialog 
                {
                arguments
                    {
                    XmNmustMatch = true;
                    XmNtextColumns = 48;
                    XmNdialogTitle = 
                    compound_string("Font Label Selection");
                    };
                callbacks
                    {
                    MrmNcreateCallback = procedures
                        {
                        XmdsRegisterWidgetCallback(CustomizeFontWidget);
                        CreateCustomizeFont();
                        };
                    XmNapplyCallback = procedures
                        {
                        ApplyFont();
                        };
                    XmNokCallback = procedures
                        {
                        ApplyFont();
                        XmdsUnmanageChildCallback(CustomizeFontWidget);
                        };
                    };
                };
            };
        callbacks
            {
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "Scope");
                };
            };
        };
    plots: XmForm 
        {
        arguments
            {
            XmNfractionBase = 1000;
            XmNresizePolicy = XmRESIZE_NONE;
            };
        controls
            {
            XmDrawingArea crosshairs_mark;
            unmanaged XmSeparator pane_separator;
            XmDrawingArea sash;
            XmDrawingArea sash;
            XmDrawingArea sash;
            XmPanedWindow pane;
            XmPanedWindow pane;
            XmPanedWindow pane;
            XmPanedWindow pane;
            unmanaged XmPopupMenu waveform_popup;
            };
        };
    pane_separator: XmSeparator widget
        {
        arguments
            {
            XmNtopAttachment = XmATTACH_FORM;
            XmNbottomAttachment = XmATTACH_FORM;
            XmNseparatorType = XmSINGLE_LINE;
            XmNleftAttachment = XmATTACH_FORM;
            XmNorientation = XmVERTICAL;
            XmNwidth = 1;
            };
        };
    pane: XmPanedWindow 
        {
        arguments
            {
            XmNtopAttachment = XmATTACH_FORM;
            XmNbottomAttachment = XmATTACH_FORM;
            XmNmarginHeight = 0;
            XmNmarginWidth = 0;
            XmNspacing = 0;
            XmNsashHeight = 5;
            XmNsashWidth = 10;
            XmNseparatorOn = false;
            };
        controls
            {
            user_defined wave;
            user_defined wave;
            user_defined wave;
            user_defined wave;
            user_defined wave;
            user_defined wave;
            user_defined wave;
            user_defined wave;
            user_defined wave;
            user_defined wave;
            user_defined wave;
            user_defined wave;
            user_defined wave;
            user_defined wave;
            user_defined wave;
            user_defined wave;
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                RegisterPane();
                };
            };
        };
    wave: user_defined procedure XmdsCreateWaveform 
        {
        arguments
            {
            XmNpaneMinimum = 5;
            XmNallowResize = true;
            XmNborderWidth = 1;
            XmdsNpointerMode = XmdsPOINTER_MODE_ZOOM;
            XmdsNattachCrosshairs = true;
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                RegisterWave();
                };
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "Scope Panels");
                };
            XmdsNcrosshairsCallback = procedures
                {
                Crosshairs();
                };
            XmdsNalignCallback = procedures
                {
                Align();
                };
            XmdsNcutCallback = procedures
                {
                Cut();
                };
            XmdsNpasteCallback = procedures
                {
                Paste();
                };
            };
        };
    sash: XmDrawingArea 
        {
        arguments
            {
            XmNheight = 10;
            XmNwidth = 5;
            XmNtopAttachment = XmATTACH_POSITION;
            XmNtopPosition = 900;
            XmNleftAttachment = XmATTACH_POSITION;
            XmNleftOffset = -2;
            XmNshadowThickness = 2;
            XmNtranslations = translation_table(
                "~Shift<Btn1Down>:MoveVerticalPane()",
                
                "~Shift<Btn1Motion>:MoveVerticalPane()",
                
                "~Shift<Btn1Up>:MoveVerticalPane()",
                
                "Shift<Btn1Up>:EqualPanes(V)",
                "<Btn2Up>:EqualPanes(V)");
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                RegisterSash();
                };
            };
        };
    crosshairs_mark: XmDrawingArea 
        {
        arguments
            {
            XmNtopAttachment = XmATTACH_POSITION;
            XmNleftAttachment = XmATTACH_POSITION;
            XmNborderWidth = 5;
            XmNheight = 0;
            XmNwidth = 0;
            XmNshadowThickness = 0;
            };
        };
    updates_menu: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Disable");
            XmNmnemonic = keysym("D");
            };
        callbacks
            {
            XmNvalueChangedCallback = procedures
                {
                UpdatesMenuButton(0);
                };
            };
        };
    brief_errors: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Brief Errors");
            XmNmnemonic = keysym("B");
            };
        };
    file_pulldown: XmPulldownMenu 
        {
        controls
            {
            XmPushButton exit_button;
            XmPushButton close_button;
            };
        };
    exit_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Exit");
            XmNmnemonic = keysym("x");
            XmNaccelerator = 
            "Ctrl<Key>z:";
            XmNacceleratorText = 
            compound_string("Ctrl/Z");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                Exit();
                };
            };
        };
    close_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Close Data Sources");
            XmNmnemonic = keysym("C");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                Close();
                };
            };
        };
    pointer_pulldown: XmPulldownMenu 
        {
        controls
            {
            XmPushButton crosshairs_button;
            XmPushButton zoom_button;
            XmPushButton drag_button;
            XmPushButton copy_button;
            };
        };
    crosshairs_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Point");
            XmNmnemonic = keysym("P");
            XmNaccelerator = 
            "Alt<Key>less:";
            XmNacceleratorText = 
            compound_string("Alt/<");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                SetPointerModeMenu(XmdsPOINTER_MODE_POINT);
                };
            };
        };
    zoom_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Zoom");
            XmNmnemonic = keysym("Z");
            XmNaccelerator = 
            "Alt<Key>z:";
            XmNacceleratorText = 
            compound_string("Alt/Z");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                SetPointerModeMenu(XmdsPOINTER_MODE_ZOOM);
                };
            };
        };
    drag_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Pan");
            XmNmnemonic = keysym("a");
            XmNaccelerator = 
            "Alt<Key>x:";
            XmNacceleratorText = 
            compound_string("Alt/X");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                SetPointerModeMenu(XmdsPOINTER_MODE_DRAG);
                };
            };
        };
    copy_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Copy");
            XmNmnemonic = keysym("C");
            XmNaccelerator = 
            "Alt<Key>c:";
            XmNacceleratorText = 
            compound_string("Alt/C");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                SetPointerModeMenu(XmdsPOINTER_MODE_EDIT);
                };
            };
        };
    print_all_pulldown: XmPulldownMenu 
        {
        controls
            {
            XmPushButton print_all_button;
            };
        };
    print_all_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Print All");
            XmNmnemonic = keysym("P");
            XmNaccelerator = 
            "Ctrl<Key>p:";
            XmNacceleratorText = 
            compound_string("Ctrl/P");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                PrintAll();
                };
            };
        };
    customize_pulldown: XmPulldownMenu 
        {
        controls
            {
            XmPushButton global_settings_button;
            XmPushButton cust_window_button;
            XmPushButton cust_print_button;
            XmPushButton cust_font_button;
            XmToggleButtonGadget 
                {
                arguments
                    {
                    XmNlabelString = 
                    compound_string("Grid Lines");
                    XmNset = true;
                    XmNmarginHeight = 0;
                    };
                callbacks
                    {
                    XmNvalueChangedCallback = procedures
                        {
                        GridStyle();
                        };
                    };
                };
	    XmToggleButtonGadget brief_errors;	
            XmSeparator 
                {
                };
            XmPushButton restore_button;
            XmPushButton restore_from_button;
            XmSeparator 
                {
                };
            XmPushButton save_button;
            XmPushButton save_as_button;
            XmPushButton save_snapshot_button;
            XmPushButton save_snapshot_as_button;
            };
        };
    global_settings_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Global Settings...");
            XmNmnemonic = keysym("G");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                ResetDataSetup(1);
                XmdsManageChildCallback(DataSetupWidget);
                };
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "Scope Menus Customize Global");
                };
            };
        };
    cust_window_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Window...");
            XmNmnemonic = keysym("W");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                ResetCustomizeWindow();
                XmdsManageChildCallback(CustomizeWindowWidget);
                };
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "Scope Menus Customize Window");
                };
            };
        };
    cust_print_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Print...");
            XmNmnemonic = keysym("P");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                ResetCustomizePrint();
                XmdsManageChildCallback(CustomizePrintWidget);
                };
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "Scope Menus Customize Print");
                };
            };
        };
    cust_font_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Font...");
            XmNmnemonic = keysym("F");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                ResetCustomizeFont();
                XmdsManageChildCallback(CustomizeFontWidget);
                };
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "Scope Menus Customize Font");
                };
            };
        };
    restore_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Use Last Saved Settings");
            XmNmnemonic = keysym("U");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                Restore(USE_DEFAULT);
                };
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "Scope Menus Customize Settings");
                };
            };
        };
    restore_from_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Use Saved Settings From...");
            XmNmnemonic = keysym("e");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                Restore(POPUP_DIALOG);
                };
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "Scope Menus Customize Settings");
                };
            };
        };
    save_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Save Current Settings");
            XmNmnemonic = keysym("S");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                Save(USE_DEFAULT);
                };
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "Scope Menus Customize Settings");
                };
            };
        };
    save_as_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Save Current Settings As...");
            XmNmnemonic = keysym("a");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                Save(POPUP_DIALOG);
                };
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "Scope Menus Customize Settings");
                };
            };
        };
    save_snapshot_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Save Snapshot");
            XmNmnemonic = keysym("v");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                Save(USE_DEFAULT_SNAPSHOT);
                };
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "Scope Menus Customize Settings");
                };
            };
        };
    save_snapshot_as_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Save Snapshot As...");
            XmNmnemonic = keysym("e");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                Save(POPUP_SNAPSHOT_DIALOG);
                };
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "Scope Menus Customize Settings");
                };
            };
        };
    help_pulldown_entry: XmCascadeButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Help");
            XmNmnemonic = keysym("H");
            };
        controls
            {
            XmPulldownMenu help_pulldown;
            };
        callbacks
            {
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "Scope Menus Help");
                };
            };
        };
    help_pulldown: XmPulldownMenu 
        {
        controls
            {
            XmPushButton overview_button;
            XmPushButton about_button;
            XmSeparator 
                {
                };
            XmPushButton file_button;
            XmPushButton pointer_mode_button;
            XmPushButton customize_button;
            XmPushButton print_button;
            XmSeparator 
                {
                };
            XmPushButton panels_button;
            XmSeparator 
                {
                };
            XmPushButton MDSplus_button;
            XmPushButton TDISHR_button;
            };
        };
    overview_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Overview");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                DisplayHelp(
                "Scope");
                };
            };
        };
    about_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("About");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                DisplayHelp(
                "Scope About");
                };
            };
        };
    file_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("File");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                DisplayHelp(
                "Scope Menus File");
                };
            };
        };
    pointer_mode_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Pointer Mode");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                DisplayHelp(
                "Scope Menus Pointer_Mode");
                };
            };
        };
    customize_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Customize");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                DisplayHelp(
                "Scope Menus Customize");
                };
            };
        };
    print_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Print");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                DisplayHelp(
                "Scope Menus Print");
                };
            };
        };
    panels_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Panels");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                DisplayHelp(
                "Scope Panels");
                };
            };
        };
    MDSplus_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("MDSplus");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                DisplayHelp(
                "MDSplus");
                };
            };
        };
    TDISHR_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("TDISHR");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                DisplayHelp(
                "TDISHR");
                };
            };
        };
    pointer_controls: XmRowColumn 
        {
        arguments
            {
            XmNorientation = XmHORIZONTAL;
            XmNadjustMargin = false;
            };
        controls
            {
            XmRadioBox 
                {
                arguments
                    {
                    XmNorientation = XmHORIZONTAL;
                    XmNmarginHeight = 0;
                    XmNmarginWidth = 0;
                    XmNpacking = XmPACK_TIGHT;
                    };
                controls
                    {
                    XmToggleButton Point;
                    XmToggleButton Zoom;
                    XmToggleButton Drag;
                    XmToggleButton Copy;
                    };
                callbacks
                    {
                    XmNhelpCallback = procedures
                        {
                        DisplayHelp(
                        "Scope Pointer_Mode");
                        };
                    };
                };
            XmToggleButtonGadget updates;
            XmRowColumn 
                {
                arguments
                    {
                    XmNorientation = XmHORIZONTAL;
                    XmNmarginHeight = 0;
                    };
                controls
                    {
                    XmTextField override_shot;
                    XmPushButton override_shot_apply;
                    };
                };
            XmTextField crosshairs_value;
            };
        };
    override_shot: XmTextField 
        {
        arguments
            {
            XmNcolumns = 10;
            XmNmarginHeight = 0;
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                ApplyOverride();
                };
            };
        };
    override_shot_apply: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Apply");
            XmNrecomputeSize = false;
            XmNmarginHeight = 0;
            XmNmarginWidth = 5;
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                ApplyOverride();
                };
            };
        };
    updates: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Updates");
            XmNset = true;
            XmNmarginHeight = 0;
            };
        callbacks
            {
            XmNvalueChangedCallback = procedures
                {
                Updates();
                };
            };
        };
    crosshairs_start: XmTextField 
        {
        arguments
            {
            XmNborderWidth = 0;
            XmNvalue = 
            "";
            XmNcursorPositionVisible = false;
            XmNeditable = false;
            XmNshadowThickness = 0;
            XmNmarginHeight = 0;
            XmNcolumns = 30;
            };
        callbacks
            {
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "Scope Pointer_Mode Crosshairs_Value");
                };
            };
        };
    crosshairs_value: XmTextField 
        {
        arguments
            {
            XmNborderWidth = 0;
            XmNvalue = 
            "";
            XmNcursorPositionVisible = false;
            XmNeditable = false;
            XmNshadowThickness = 0;
            XmNmarginHeight = 0;
            XmNcolumns = 30;
            };
        callbacks
            {
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "Scope Pointer_Mode Crosshairs_Value");
                };
            };
        };
    Point: XmToggleButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Point");
            XmNset = false;
            XmNmarginHeight = 0;
            XmNhighlightThickness = 1;
            };
        callbacks
            {
            XmNvalueChangedCallback = procedures
                {
                SetPointerMode(XmdsPOINTER_MODE_POINT);
                };
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "Scope Pointer_Mode Crosshairs");
                };
            };
        };
    Zoom: XmToggleButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Zoom");
            XmNset = true;
            XmNmarginHeight = 0;
            XmNhighlightThickness = 1;
            };
        callbacks
            {
            XmNvalueChangedCallback = procedures
                {
                SetPointerMode(XmdsPOINTER_MODE_ZOOM);
                };
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "Scope Pointer_Mode Zoom");
                };
            };
        };
    Drag: XmToggleButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Pan");
            XmNset = false;
            XmNmarginHeight = 0;
            XmNhighlightThickness = 1;
            };
        callbacks
            {
            XmNvalueChangedCallback = procedures
                {
                SetPointerMode(XmdsPOINTER_MODE_DRAG);
                };
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "Scope Pointer_Mode Drag");
                };
            };
        };
    Copy: XmToggleButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Copy");
            XmNset = false;
            XmNmarginHeight = 0;
            XmNhighlightThickness = 1;
            };
        callbacks
            {
            XmNvalueChangedCallback = procedures
                {
                SetPointerMode(XmdsPOINTER_MODE_EDIT);
                };
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "Scope Pointer_Mode Edit");
                };
            };
        };
    waveform_popup: XmPopupMenu 
        {
        arguments
            {
            XmNmenuHistory = XmPushButton data_setup;
            };
        controls
            {
            XmPushButton data_setup;
            XmSeparator 
                {
                };
            XmPushButton 
                {
                arguments
                    {
                    XmNlabelString = 
                    compound_string("Autoscale");
                    };
                callbacks
                    {
                    XmNactivateCallback = procedures
                        {
                        XmdsUnmanageChildCallback(Button3Widget);
                        Autoscale(
                        "b");
                        };
                    XmNhelpCallback = procedures
                        {
                        DisplayHelp(
                        "Scope Panels Autoscale");
                        };
                    };
                };
            XmPushButton 
                {
                arguments
                    {
                    XmNlabelString = 
                    compound_string("Autoscale Y");
                    };
                callbacks
                    {
                    XmNactivateCallback = procedures
                        {
                        XmdsUnmanageChildCallback(Button3Widget);
                        Autoscale(
                        "y");
                        };
                    XmNhelpCallback = procedures
                        {
                        DisplayHelp(
                        "Scope Panels Autoscale");
                        };
                    };
                };
            XmPushButton 
                {
                arguments
                    {
                    XmNlabelString = 
                    compound_string("Autoscale All");
                    XmNacceleratorText = 
                    compound_string("Alt/B");
                    XmNaccelerator = 
                    "Alt<Key>b:";
                    };
                callbacks
                    {
                    XmNactivateCallback = procedures
                        {
                        XmdsUnmanageChildCallback(Button3Widget);
                        Autoscale(
                        "B");
                        };
                    XmNhelpCallback = procedures
                        {
                        DisplayHelp(
                        "Scope Panels Autoscale");
                        };
                    };
                };
            XmPushButton 
                {
                arguments
                    {
                    XmNlabelString = 
                    compound_string("Autoscale All Y");
                    XmNacceleratorText = 
                    compound_string("Alt/Y");
                    };
                callbacks
                    {
                    XmNactivateCallback = procedures
                        {
                        XmdsUnmanageChildCallback(Button3Widget);
                        Autoscale(
                        "Y");
                        };
                    XmNhelpCallback = procedures
                        {
                        DisplayHelp(
                        "Scope Panels Autoscale");
                        };
                    };
                };
            XmPushButton 
                {
                arguments
                    {
                    XmNlabelString = 
                    compound_string("All same scale");
                    };
                callbacks
                    {
                    XmNactivateCallback = procedures
                        {
                        XmdsUnmanageChildCallback(Button3Widget);
                        Autoscale(
                        "0");
                        };
                    XmNhelpCallback = procedures
                        {
                        DisplayHelp(
                        "Scope Panels Autoscale");
                        };
                    };
                };
            XmPushButton 
                {
                arguments
                    {
                    XmNlabelString = 
                    compound_string("All same X scale");
                    };
                callbacks
                    {
                    XmNactivateCallback = procedures
                        {
                        XmdsUnmanageChildCallback(Button3Widget);
                        Autoscale(
                        "1");
                        };
                    XmNhelpCallback = procedures
                        {
                        DisplayHelp(
                        "Scope Panels Autoscale");
                        };
                    };
                };
            XmPushButton 
                {
                arguments
                    {
                    XmNlabelString = 
                    compound_string("All same X scale (auto Y)");
                    };
                callbacks
                    {
                    XmNactivateCallback = procedures
                        {
                        XmdsUnmanageChildCallback(Button3Widget);
                        Autoscale(
                        "3");
                        };
                    XmNhelpCallback = procedures
                        {
                        DisplayHelp(
                        "Scope Panels Autoscale");
                        };
                    };
                };
            XmPushButton 
                {
                arguments
                    {
                    XmNlabelString = 
                    compound_string("All same Y scale");
                    };
                callbacks
                    {
                    XmNactivateCallback = procedures
                        {
                        XmdsUnmanageChildCallback(Button3Widget);
                        Autoscale(
                        "2");
                        };
                    XmNhelpCallback = procedures
                        {
                        DisplayHelp(
                        "Scope Panels Autoscale");
                        };
                    };
                };
            XmPushButton 
                {
                arguments
                    {
                    XmNlabelString = 
                    compound_string("Reset scales");
                    };
                callbacks
                    {
                    XmNactivateCallback = procedures
                        {
                        XmdsUnmanageChildCallback(Button3Widget);
                        Autoscale(
                        "4");
                        };
                    XmNhelpCallback = procedures
                        {
                        DisplayHelp(
                        "Scope Panels Autoscale");
                        };
                    };
                };
            XmPushButton 
                {
                arguments
                    {
                    XmNlabelString = 
                    compound_string("Reset all scales");
                    };
                callbacks
                    {
                    XmNactivateCallback = procedures
                        {
                        XmdsUnmanageChildCallback(Button3Widget);
                        Autoscale(
                        "5");
                        };
                    XmNhelpCallback = procedures
                        {
                        DisplayHelp(
                        "Scope Panels Autoscale");
                        };
                    };
                };
            XmPushButton 
                {
                arguments
                    {
                    XmNlabelString = 
                    compound_string("Refresh");
                    };
                callbacks
                    {
                    XmNactivateCallback = procedures
                        {
                        XmdsUnmanageChildCallback(Button3Widget);
                        Refresh();
                        };
                    XmNhelpCallback = procedures
                        {
                        DisplayHelp(
                        "Scope Panels Refresh");
                        };
                    };
                };
            XmSeparator 
                {
                };
            XmPushButton 
                {
                arguments
                    {
                    XmNlabelString = 
                    compound_string("Print");
                    };
                callbacks
                    {
                    XmNactivateCallback = procedures
                        {
                        XmdsUnmanageChildCallback(Button3Widget);
                        Print();
                        };
                    XmNhelpCallback = procedures
                        {
                        DisplayHelp(
                        "Scope Panels Print");
                        };
                    };
                };
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                XmdsRegisterWidgetCallback(Button3Widget);
                };
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "Scope Panels");
                };
            };
        };
    data_setup: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Setup data source...");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                XmdsUnmanageChildCallback(Button3Widget);
                ResetDataSetup(0);
                XmdsManageChildCallback(DataSetupWidget);
                };
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "Scope Panels Setup_data_source");
                };
            };
        };
    file_dialog: XmFileSelectionDialog 
        {
        arguments
            {
            XmNpattern = 
            compound_string("*.dat");
            XmNdialogTitle = 
            compound_string("Scope: Save Current Settings As");
            XmNselectionLabelString = 
            compound_string("Select Name For Configuration File: ");
            XmNdefaultPosition = true;
            XmNautoUnmanage = true;
            };
        callbacks
            {
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "XYplot File_Selection");
                };
            };
        };
    rows_in_column: XmLabel 
        {
        arguments
            {
            XmNtopAttachment = XmATTACH_FORM;
            XmNleftAttachment = XmATTACH_FORM;
            XmNleftOffset = 60;
            XmNlabelString = 
            compound_string("Rows in Column");
            };
        };
    rows_1: XmScale 
        {
        arguments
            {
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmLabel rows_in_column;
            XmNleftAttachment = XmATTACH_FORM;
            XmNheight = 100;
            XmNvalue = 1;
            XmNmaximum = 16;
            XmNminimum = 1;
            XmNtitleString = 
            compound_string("1");
            XmNshowValue = true;
            XmNorientation = XmVERTICAL;
            };
        };
    rows_2: XmScale 
        {
        arguments
            {
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmLabel rows_in_column;
            XmNleftAttachment = XmATTACH_WIDGET;
            XmNleftWidget = XmScale rows_1;
            XmNheight = 100;
            XmNvalue = 1;
            XmNmaximum = 16;
            XmNminimum = 0;
            XmNtitleString = 
            compound_string("2");
            XmNshowValue = true;
            XmNorientation = XmVERTICAL;
            };
        };
    rows_3: XmScale 
        {
        arguments
            {
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmLabel rows_in_column;
            XmNleftAttachment = XmATTACH_WIDGET;
            XmNleftWidget = XmScale rows_2;
            XmNheight = 100;
            XmNvalue = 1;
            XmNmaximum = 16;
            XmNminimum = 0;
            XmNtitleString = 
            compound_string("3");
            XmNshowValue = true;
            XmNorientation = XmVERTICAL;
            };
        };
    rows_4: XmScale 
        {
        arguments
            {
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmLabel rows_in_column;
            XmNleftAttachment = XmATTACH_WIDGET;
            XmNleftWidget = XmScale rows_3;
            XmNheight = 100;
            XmNvalue = 1;
            XmNmaximum = 16;
            XmNminimum = 0;
            XmNtitleString = 
            compound_string("4");
            XmNshowValue = true;
            XmNorientation = XmVERTICAL;
            };
        };
    window_title_label: XmLabel 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Window Title:");
            XmNleftAttachment = XmATTACH_FORM;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmScale rows_1;
            XmNtopOffset = 10;
            };
        };
    window_title: XmText 
        {
        arguments
            {
            XmNleftAttachment = XmATTACH_WIDGET;
            XmNleftWidget = XmLabel window_title_label;
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmLabel window_title_label;
            XmNcolumns = 60;
            };
        };
    icon_name_label: XmLabel 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Icon Name:");
            XmNleftAttachment = XmATTACH_FORM;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmText window_title;
            };
        };
    icon_name: XmText 
        {
        arguments
            {
            XmNleftAttachment = XmATTACH_WIDGET;
            XmNleftWidget = XmLabel window_title_label;
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmLabel icon_name_label;
            XmNcolumns = 60;
            };
        };
    title_event_label: XmLabel 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Update event:");
            XmNleftAttachment = XmATTACH_FORM;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmText icon_name;
            };
        };
    title_event: XmText 
        {
        arguments
            {
            XmNleftAttachment = XmATTACH_WIDGET;
            XmNleftWidget = XmLabel window_title_label;
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmLabel title_event_label;
            XmNcolumns = 25;
            };
        };
    cw_ok_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("OK");
            XmNleftAttachment = XmATTACH_FORM;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmText title_event;
            XmNtopOffset = 10;
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                ApplyCustomizeWindow();
                Ok();
                };
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "XYplot Buttons");
                };
            };
        };
    cw_apply_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Apply");
            XmNrightAttachment = XmATTACH_POSITION;
            XmNrightPosition = 55;
            XmNrightOffset = -10;
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmPushButton cw_ok_button;
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                ApplyCustomizeWindow();
                };
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "XYplot Buttons");
                };
            };
        };
    cw_cancel_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Cancel");
            XmNrightAttachment = XmATTACH_FORM;
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmPushButton cw_ok_button;
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                XmdsUnmanageChildCallback(CustomizeWindowWidget);
                };
            XmNhelpCallback = procedures
                {
                DisplayHelp(
                "XYplot Buttons");
                };
            };
        };
!    help_window: DXmHelp 
!        {
!        arguments
!            {
!            DXmNapplicationName = 
!            compound_string("Scope");
!            DXmNcols = 72;
!            DXmNlibrarySpec = 
!            compound_string("MDSplus");
!            DXmNoverviewTopic = 
!            compound_string("Scope");
!            };
!        };
    printer_select_label: XmLabel widget
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Selected printer:");
            XmNleftAttachment = XmATTACH_FORM;
            XmNtopAttachment = XmATTACH_FORM;
            XmNtopOffset = 10;
            };
        };
    printer_select: XmOptionMenu 
        {
        arguments
            {
            XmNmenuHistory = XmPushButtonGadget to_file;
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmLabel printer_select_label;
            XmNtopOffset = -5;
            XmNleftAttachment = XmATTACH_WIDGET;
            XmNleftWidget = XmLabel printer_select_label;
            XmNleftOffset = 10;
            };
        controls
            {
            XmPulldownMenu printer_select_pulldown;
            };
        };
    printer_select_pulldown: XmPulldownMenu 
        {
        controls
            {
		XmPushButtonGadget to_file;
            };
        };
    to_file: XmPushButtonGadget
        {
        arguments
            {
                XmNlabelString = compound_string("To file");
            };
        };
    print_file_label: XmLabel widget
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Print file:");
            XmNleftAttachment = XmATTACH_FORM;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmLabel printer_select_label;
            XmNtopOffset = 10;
            };
        };
    print_file: XmText 
        {
        arguments
            {
            XmNrows = 1;
            XmNcolumns = 40;
            XmNresizeHeight = false;
            XmNresizeWidth = false;
            XmNmarginHeight = 1;
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmLabel print_file_label;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNleftWidget = XmOptionMenu printer_select;
            };
        };
    cp_portrait_button : XmToggleButton widget
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Portrait mode");
            XmNset = false;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmLabel print_file_label;
            XmNtopOffset = 5;
            XmNleftAttachment = XmATTACH_FORM;
            };
        };
    print_event_label: XmLabel widget
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Print event:");
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmToggleButton cp_portrait_button;
            XmNleftAttachment = XmATTACH_FORM;
            XmNtopOffset = 5;
            };
        };
    print_event: XmText 
        {
        arguments
            {
            XmNrows = 1;
            XmNcolumns = 25;
            XmNresizeHeight = false;
            XmNresizeWidth = false;
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmLabel print_event_label;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNleftWidget = XmOptionMenu printer_select;
            XmNmarginHeight = 1;
            };
        };
    print_window_title: XmToggleButton widget
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Print window title");
            XmNset = false;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmLabel print_event_label;
            XmNtopOffset = 5;
            XmNleftAttachment = XmATTACH_FORM;
            };
        };
    cp_ok_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("OK");
            XmNleftAttachment = XmATTACH_FORM;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmToggleButton print_window_title;
            XmNtopOffset = 10;
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                ApplyCustomizePrint();
                Ok();
                };
            };
        };
    cp_apply_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Apply");
            XmNrightAttachment = XmATTACH_POSITION;
            XmNrightPosition = 55;
            XmNrightOffset = -10;
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmPushButton cp_ok_button;
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                ApplyCustomizePrint();
                };
            };
        };
    cp_cancel_button: XmPushButton 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Cancel");
            XmNrightAttachment = XmATTACH_FORM;
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmPushButton cp_ok_button;
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                XmdsUnmanageChildCallback(CustomizePrintWidget);
                };
            };
        };
    data_setup_db: exported XmFormDialog 
        {
        arguments
            {
            XmNdefaultButton = XmPushButtonGadget ok_button;
            XmNdefaultPosition = true;
            XmNdialogStyle = XmDIALOG_MODELESS;
            XmNautoUnmanage = false;
            XmNallowOverlap = true;
            XmNnoResize = true;
            };
        controls
            {
            XmLabelGadget 
                {
                arguments
                    {
                    XmNlabelString = 
                    compound_string("Y Axis:");
                    XmNmarginWidth = 4;
                    XmNmarginHeight = 5;
                    XmNtopAttachment = XmATTACH_FORM;
                    XmNleftAttachment = XmATTACH_FORM;
                    };
                };
            XmText y_expression;
            XmToggleButtonGadget y_grid_labels;
            XmLabelGadget y_min_label;
            XmText y_min_text;
            XmLabelGadget y_max_label;
            XmText y_max_text;
            XmScale y_grid_lines;
            XmPushButtonGadget expand;
            XmSeparatorGadget y_x_sep;
            XmLabelGadget x_label;
            XmText x_expression;
            XmToggleButtonGadget x_grid_labels;
            XmLabelGadget x_min_label;
            XmText x_min_text;
            XmLabelGadget x_max_label;
            XmText x_max_text;
            XmScale x_grid_lines;
            XmSeparatorGadget x_exp_sep;
            XmLabelGadget exp_label;
            XmLabelGadget default_label;
            XmLabelGadget event_label;
            XmLabelGadget title_label;
            XmLabelGadget print_label;
            XmText exp_text;
            XmText default_text;
            XmText event_text;
            XmText title_text;
            XmText print_text;
            XmLabelGadget shot_label;
            XmLabelGadget padlabel_label;
            XmText shot_text;
            XmText padlabel_expression;
            XmToggleButtonGadget step_plot;
            XmOptionMenu show_mode;
            XmToggleButtonGadget update_limits;
            XmPushButtonGadget setup_defaults;
            XmPushButtonGadget ok_button;
            XmPushButtonGadget apply_button;
            XmPushButtonGadget 
                {
                arguments
                    {
                    XmNlabelString = 
                    compound_string("Reset");
                    XmNshadowThickness = 4;
                    XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
                    XmNtopWidget = XmPushButtonGadget ok_button;
                    XmNleftAttachment = XmATTACH_POSITION;
                    XmNleftPosition = 50;
                    XmNleftOffset = -15;
                    };
                callbacks
                    {
                    XmNactivateCallback = procedures
                        {
                        ResetDataSetup(0);
                        };
                    };
                };
            XmPushButtonGadget 
                {
                arguments
                    {
                    XmNlabelString = 
                    compound_string("Erase");
                    XmNshadowThickness = 4;
                    XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
                    XmNtopWidget = XmPushButtonGadget ok_button;
                    XmNleftAttachment = XmATTACH_POSITION;
                    XmNleftPosition = 75;
                    XmNleftOffset = -15;
                    };
                callbacks
                    {
                    XmNactivateCallback = procedures
                        {
                        ResetDataSetup(2);
                        };
                    };
                };
            XmPushButtonGadget 
                {
                arguments
                    {
                    XmNlabelString = 
                    compound_string("Cancel");
                    XmNshadowThickness = 4;
                    XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
                    XmNtopWidget = XmPushButtonGadget ok_button;
                    XmNrightAttachment = XmATTACH_POSITION;
                    XmNrightPosition = 100;
                    };
                callbacks
                    {
                    XmNactivateCallback = procedures
                        {
                        XmdsUnmanageChildCallback(DataSetupWidget);
                        };
                    };
                };
            unmanaged XmWarningDialog data_setup_error;
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                XmdsRegisterWidgetCallback(DataSetupWidget);
                };
            };
        };
    y_expression: XmText 
        {
        arguments
            {
            XmNrows = 1;
            XmNcolumns = 48;
            XmNresizeHeight = false;
            XmNresizeWidth = false;
            XmNmarginWidth = 2;
            XmNmarginHeight = 1;
            XmNtopAttachment = XmATTACH_FORM;
            XmNleftAttachment = XmATTACH_FORM;
            XmNleftOffset = 100;
            };
!            XmNeditMode = XmMULTI_LINE_EDIT;
        callbacks
            {
!            XmNeditMode = XmMULTI_LINE_EDIT;
            XmNvalueChangedCallback = procedures
                {
                DisableGlobalDefault(
                "");
                };
            };
        };
    y_grid_labels: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Labels");
            XmNset = true;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmText y_expression;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNleftWidget = XmText y_expression;
            };
        callbacks
            {
            XmNvalueChangedCallback = procedures
                {
                DisableGlobalDefault(
                "");
                };
            };
        };
    y_min_label: XmLabelGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Min:");
            XmNmarginWidth = 4;
            XmNmarginHeight = 5;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmText y_expression;
            XmNleftAttachment = XmATTACH_WIDGET;
            XmNleftWidget = XmToggleButtonGadget y_grid_labels;
            };
        };
    y_min_text: XmText 
        {
        arguments
            {
            XmNrows = 1;
            XmNcolumns = 12;
            XmNresizeHeight = false;
            XmNresizeWidth = false;
            XmNmarginWidth = 2;
            XmNmarginHeight = 1;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmText y_expression;
            XmNleftAttachment = XmATTACH_WIDGET;
            XmNleftWidget = XmLabelGadget y_min_label;
            };
        callbacks
            {
            XmNvalueChangedCallback = procedures
                {
                DisableGlobalDefault(
                "");
                };
            };
        };
    y_max_label: XmLabelGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Max:");
            XmNmarginWidth = 4;
            XmNmarginHeight = 5;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmText y_expression;
            XmNleftAttachment = XmATTACH_WIDGET;
            XmNleftWidget = XmText y_min_text;
            };
        };
    y_max_text: XmText 
        {
        arguments
            {
            XmNrows = 1;
            XmNcolumns = 12;
            XmNresizeHeight = false;
            XmNresizeWidth = false;
            XmNmarginWidth = 2;
            XmNmarginHeight = 1;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmText y_expression;
            XmNleftAttachment = XmATTACH_WIDGET;
            XmNleftWidget = XmLabelGadget y_max_label;
            };
        callbacks
            {
            XmNvalueChangedCallback = procedures
                {
                DisableGlobalDefault(
                "");
                };
            };
        };
    y_grid_lines: XmScale 
        {
        arguments
            {
            XmNvalue = 4;
            XmNmaximum = 20;
            XmNminimum = 0;
            XmNtitleString = 
            compound_string("Grid lines");
            XmNshowValue = true;
            XmNorientation = XmHORIZONTAL;
            XmNtopAttachment = XmATTACH_FORM;
            XmNleftAttachment = XmATTACH_WIDGET;
            XmNleftWidget = XmText y_expression;
            XmNleftOffset = 20;
            };
        callbacks
            {
            XmNvalueChangedCallback = procedures
                {
                DisableGlobalDefault(
                "");
                };
            };
        };
    expand: XmPushButtonGadget 
        {
        arguments
            {
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmText y_expression;
            XmNleftAttachment = XmATTACH_FORM;
            XmNlabelString = 
            compound_string("Expand...");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                expand_reset(0);
                };
            };
        };
    y_x_sep: XmSeparatorGadget 
        {
        arguments
            {
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmScale y_grid_lines;
            XmNleftAttachment = XmATTACH_FORM;
            XmNrightAttachment = XmATTACH_FORM;
            XmNshadowThickness = 0;
            XmNheight = 4;
            };
        };
    x_label: XmLabelGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("X Axis:");
            XmNmarginWidth = 4;
            XmNmarginHeight = 5;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmSeparatorGadget y_x_sep;
            XmNleftAttachment = XmATTACH_FORM;
            };
        };
    x_expression: XmText 
        {
        arguments
            {
            XmNrows = 1;
            XmNcolumns = 48;
            XmNresizeHeight = false;
            XmNresizeWidth = false;
            XmNmarginWidth = 2;
            XmNmarginHeight = 1;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmSeparatorGadget y_x_sep;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNleftWidget = XmText y_expression;
            };
!            XmNeditMode = XmMULTI_LINE_EDIT;
        callbacks
            {
!            XmNeditMode = XmMULTI_LINE_EDIT;
            XmNvalueChangedCallback = procedures
                {
                DisableGlobalDefault(
                "");
                };
            };
        };
    x_grid_labels: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Labels");
            XmNset = true;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmText x_expression;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNleftWidget = XmText y_expression;
            };
        callbacks
            {
            XmNvalueChangedCallback = procedures
                {
                DisableGlobalDefault(
                "");
                };
            };
        };
    x_min_label: XmLabelGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Min:");
            XmNmarginWidth = 4;
            XmNmarginHeight = 5;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmText x_expression;
            XmNleftAttachment = XmATTACH_WIDGET;
            XmNleftWidget = XmToggleButtonGadget x_grid_labels;
            };
        };
    x_min_text: XmText 
        {
        arguments
            {
            XmNrows = 1;
            XmNcolumns = 12;
            XmNresizeHeight = false;
            XmNresizeWidth = false;
            XmNmarginWidth = 2;
            XmNmarginHeight = 1;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmText x_expression;
            XmNleftAttachment = XmATTACH_WIDGET;
            XmNleftWidget = XmLabelGadget x_min_label;
            };
        callbacks
            {
            XmNvalueChangedCallback = procedures
                {
                DisableGlobalDefault(
                "");
                };
            };
        };
    x_max_label: XmLabelGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Max:");
            XmNmarginWidth = 4;
            XmNmarginHeight = 5;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmText x_expression;
            XmNleftAttachment = XmATTACH_WIDGET;
            XmNleftWidget = XmText x_min_text;
            };
        };
    x_max_text: XmText 
        {
        arguments
            {
            XmNrows = 1;
            XmNcolumns = 12;
            XmNresizeHeight = false;
            XmNresizeWidth = false;
            XmNmarginWidth = 2;
            XmNmarginHeight = 1;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmText x_expression;
            XmNleftAttachment = XmATTACH_WIDGET;
            XmNleftWidget = XmLabelGadget x_max_label;
            };
        callbacks
            {
            XmNvalueChangedCallback = procedures
                {
                DisableGlobalDefault(
                "");
                };
            };
        };
    x_grid_lines: XmScale 
        {
        arguments
            {
            XmNorientation = XmHORIZONTAL;
            XmNvalue = 4;
            XmNmaximum = 20;
            XmNminimum = 0;
            XmNtitleString = 
            compound_string("Grid lines");
            XmNshowValue = true;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmSeparatorGadget y_x_sep;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNleftWidget = XmScale y_grid_lines;
            };
        callbacks
            {
            XmNvalueChangedCallback = procedures
                {
                DisableGlobalDefault(
                "");
                };
            };
        };
    x_exp_sep: XmSeparatorGadget 
        {
        arguments
            {
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmScale x_grid_lines;
            XmNleftAttachment = XmATTACH_FORM;
            XmNrightAttachment = XmATTACH_FORM;
            XmNshadowThickness = 0;
            XmNheight = 4;
            };
        };
    exp_label: XmLabelGadget 
        {
        arguments
            {
            XmNmarginWidth = 4;
            XmNmarginHeight = 5;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmSeparatorGadget x_exp_sep;
            XmNleftAttachment = XmATTACH_FORM;
            };
        };
    default_label: XmLabelGadget 
        {
        arguments
            {
            XmNmarginWidth = 4;
            XmNmarginHeight = 5;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmLabelGadget exp_label;
            XmNleftAttachment = XmATTACH_FORM;
            };
        };
    event_label: XmLabelGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Update Event:");
            XmNmarginWidth = 4;
            XmNmarginHeight = 5;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmLabelGadget default_label;
            XmNleftAttachment = XmATTACH_FORM;
            };
        };
    title_label: XmLabelGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Title:");
            XmNmarginWidth = 4;
            XmNmarginHeight = 5;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmLabelGadget event_label;
            XmNleftAttachment = XmATTACH_FORM;
            };
        };
    print_label: XmLabelGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Print Label:");
            XmNmarginWidth = 4;
            XmNmarginHeight = 5;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmLabelGadget title_label;
            XmNleftAttachment = XmATTACH_FORM;
            };
        };
    exp_text: XmText 
        {
        arguments
            {
            XmNrows = 1;
            XmNcolumns = 12;
            XmNresizeHeight = false;
            XmNresizeWidth = false;
            XmNmarginWidth = 2;
            XmNmarginHeight = 1;
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmLabelGadget exp_label;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNleftWidget = XmText y_expression;
            };
        callbacks
            {
            XmNvalueChangedCallback = procedures
                {
                DisableGlobalDefault(
                "");
                };
            };
        };
    default_text: XmText 
        {
        arguments
            {
            XmNrows = 1;
            XmNcolumns = 48;
            XmNresizeHeight = false;
            XmNresizeWidth = false;
            XmNmarginWidth = 2;
            XmNmarginHeight = 1;
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmLabelGadget default_label;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNleftWidget = XmText y_expression;
            };
        callbacks
            {
            XmNvalueChangedCallback = procedures
                {
                DisableGlobalDefault(
                "");
                };
            };
        };
    event_text: XmText 
        {
        arguments
            {
            XmNrows = 1;
            XmNcolumns = 18;
            XmNresizeHeight = false;
            XmNresizeWidth = false;
            XmNmarginWidth = 2;
            XmNmarginHeight = 1;
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmLabelGadget event_label;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNleftWidget = XmText y_expression;
            };
        callbacks
            {
            XmNvalueChangedCallback = procedures
                {
                DisableGlobalDefault(
                "");
                };
            };
        };
    title_text: XmText 
        {
        arguments
            {
            XmNrows = 1;
            XmNcolumns = 48;
            XmNresizeHeight = false;
            XmNresizeWidth = false;
            XmNmarginWidth = 2;
            XmNmarginHeight = 1;
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmLabelGadget title_label;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNleftWidget = XmText y_expression;
            };
        callbacks
            {
            XmNvalueChangedCallback = procedures
                {
                DisableGlobalDefault(
                "");
                };
            };
        };
    print_text: XmText 
        {
        arguments
            {
            XmNrows = 1;
            XmNcolumns = 48;
            XmNresizeHeight = false;
            XmNresizeWidth = false;
            XmNmarginWidth = 2;
            XmNmarginHeight = 1;
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmLabelGadget print_label;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNleftWidget = XmText y_expression;
            };
        callbacks
            {
            XmNvalueChangedCallback = procedures
                {
                DisableGlobalDefault(
                "");
                };
            };
        };
    shot_label: XmLabelGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Shot:");
            XmNmarginWidth = 4;
            XmNmarginHeight = 5;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmSeparatorGadget x_exp_sep;
            XmNleftAttachment = XmATTACH_WIDGET;
            XmNleftWidget = XmText exp_text;
            XmNleftOffset = 2;
            };
        };
    padlabel_label: XmLabelGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Pad:");
            XmNmarginWidth = 4;
            XmNmarginHeight = 5;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmLabelGadget default_label;
            XmNleftAttachment = XmATTACH_WIDGET;
            XmNleftWidget = XmText event_text;
            };
        };
    shot_text: XmText 
        {
        arguments
            {
            XmNrows = 1;
            XmNcolumns = 29;
            XmNresizeHeight = false;
            XmNresizeWidth = false;
            XmNmarginWidth = 2;
            XmNmarginHeight = 1;
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmLabelGadget shot_label;
            XmNleftAttachment = XmATTACH_WIDGET;
            XmNleftWidget = XmLabelGadget shot_label;
            };
        callbacks
            {
            XmNvalueChangedCallback = procedures
                {
                DisableGlobalDefault(
                "");
                };
            };
        };
    padlabel_expression: XmText 
        {
        arguments
            {
            XmNrows = 1;
            XmNcolumns = 24;
            XmNresizeHeight = false;
            XmNresizeWidth = false;
            XmNmarginWidth = 2;
            XmNmarginHeight = 1;
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmLabelGadget padlabel_label;
            XmNleftAttachment = XmATTACH_WIDGET;
            XmNleftWidget = XmLabelGadget padlabel_label;
            };
        callbacks
            {
            XmNvalueChangedCallback = procedures
                {
                DisableGlobalDefault(
                "");
                };
            };
        };
    step_plot: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Step plot");
            XmNset = false;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmSeparatorGadget x_exp_sep;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNleftWidget = XmScale y_grid_lines;
            };
        callbacks
            {
            XmNvalueChangedCallback = procedures
                {
                DisableGlobalDefault(
                "");
                };
            };
        };
    show_mode: XmOptionMenu 
        {
        arguments
            {
            XmNmenuHistory = XmPushButtonGadget show_lines;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmToggleButtonGadget step_plot;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNleftWidget = XmScale y_grid_lines;
            };
        controls
            {
            XmPulldownMenu show_mode_pulldown;
            };
        };
    show_mode_pulldown: XmPulldownMenu 
        {
        controls
            {
            XmPushButtonGadget show_lines;
            XmPushButtonGadget show_points;
            XmPushButtonGadget show_both;
            };
        callbacks
            {
            XmNentryCallback = procedures
                {
                DisableGlobalDefault(
                "show_mode");
                };
            };
        };
    show_lines: XmPushButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Show lines:");
            };
        };
    show_points: XmPushButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Show points:");
            };
        };
    show_both: XmPushButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Show both:");
            };
        };
    update_limits: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Update Limits");
            XmNset = true;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmOptionMenu show_mode;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNleftWidget = XmScale y_grid_lines;
            };
        callbacks
            {
            XmNvalueChangedCallback = procedures
                {
                DisableGlobalDefault(
                "");
                };
            };
        };
    setup_defaults: XmPushButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Defaults...");
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmToggleButtonGadget update_limits;
            XmNtopOffset = 10;
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNleftWidget = XmScale y_grid_lines;
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                InitDefaultsSetupWidget();
                XmdsManageChildCallback(DefaultsSetupWidget);
                };
            };
        };
    ok_button: XmPushButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("OK");
            XmNshadowThickness = 4;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmText print_text;
            XmNleftAttachment = XmATTACH_FORM;
            XmNtopOffset = 5;
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                ApplyDataSetup(1);
                Ok();
                };
            };
        };
    defaults_setup_db: exported XmBulletinBoardDialog 
        {
        arguments
            {
            XmNdialogTitle = 
            compound_string("Enable/Disable Global Default Usage");
            XmNmarginHeight = 0;
            XmNmarginWidth = 0;
            XmNdefaultButton = XmPushButtonGadget def_apply_button;
            XmNdefaultPosition = true;
            XmNdialogStyle = XmDIALOG_MODELESS;
            XmNautoUnmanage = false;
            XmNallowOverlap = true;
            };
        controls
            {
            XmLabelGadget def_y_label;
            XmToggleButtonGadget def_y_expression;
            XmToggleButtonGadget def_y_grid_labels;
            XmToggleButtonGadget def_y_min_text;
            XmToggleButtonGadget def_y_max_text;
            XmToggleButtonGadget def_y_grid_lines;
            XmLabelGadget def_x_label;
            XmToggleButtonGadget def_x_expression;
            XmToggleButtonGadget def_x_grid_labels;
            XmToggleButtonGadget def_x_min_text;
            XmToggleButtonGadget def_x_max_text;
            XmToggleButtonGadget def_x_grid_lines;
            XmToggleButtonGadget def_exp_text;
            XmToggleButtonGadget def_default_text;
            XmToggleButtonGadget def_event_text;
            XmToggleButtonGadget def_title_text;
            XmToggleButtonGadget def_print_text;
            XmToggleButtonGadget def_shot_text;
            XmToggleButtonGadget def_padlabel_expression;
            XmToggleButtonGadget def_step_plot;
            XmToggleButtonGadget def_show_mode;
            XmToggleButtonGadget def_update_limits;
            XmPushButtonGadget def_apply_button;
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                XmdsRegisterWidgetCallback(DefaultsSetupWidget);
                };
            };
        };
    def_y_label: XmLabelGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Y Axis:");
            XmNmarginWidth = 4;
            XmNmarginHeight = 5;
            };
        };
    def_y_expression: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Value");
            XmNset = true;
            };
        };
    def_y_grid_labels: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Labels");
            XmNset = true;
            };
        };
    def_y_min_text: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Min");
            XmNset = true;
            };
        };
    def_y_max_text: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Max");
            XmNset = true;
            };
        };
    def_y_grid_lines: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Grid Lines");
            XmNset = true;
            };
        };
    def_x_label: XmLabelGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("X Axis:");
            XmNmarginWidth = 4;
            XmNmarginHeight = 5;
            };
        };
    def_x_expression: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Value");
            XmNset = true;
            };
        };
    def_x_grid_labels: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Labels");
            XmNset = true;
            };
        };
    def_x_min_text: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Min");
            XmNset = true;
            };
        };
    def_x_max_text: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Max");
            XmNset = true;
            };
        };
    def_x_grid_lines: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Grid Lines");
            XmNset = true;
            };
        };
    def_exp_text: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Experiment");
            XmNset = true;
            };
        };
    def_default_text: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Default node");
            XmNset = true;
            };
        };
    def_event_text: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Event");
            XmNset = true;
            };
        };
    def_title_text: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Title");
            XmNset = true;
            };
        };
    def_print_text: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Print title");
            XmNset = true;
            };
        };
    def_shot_text: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Shot");
            XmNset = true;
            };
        };
    def_padlabel_expression: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Pad");
            XmNset = true;
            };
        };
    def_step_plot: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Step Plot");
            XmNset = true;
            };
        };
    def_show_mode: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Show lines");
            XmNset = true;
            };
        };
    def_update_limits: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Update Limits");
            XmNset = true;
            };
        };
    def_apply_button: XmPushButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Dismiss");
            XmNshadowThickness = 4;
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                XmdsUnmanageChildCallback(DefaultsSetupWidget);
                };
            };
        };
    data_setup_error: XmWarningDialog 
        {
        arguments
            {
            XmNdialogTitle = 
            compound_string("Data Setup Error");
            XmNautoUnmanage = true;
            XmNokLabelString = 
            compound_string("Use As Is");
            XmNcancelLabelString = 
            compound_string("Cancel");
            XmNmessageString = 
            compound_string("Save settings before exiting?");
            };
        callbacks
            {
            XmNokCallback = procedures
                {
                ApplyDataSetup(0);
                };
            };
        };
    expand_dialog: exported XmFormDialog 
        {
        arguments
            {
            XmNwidth = 600;
            XmNheight = 400;
            XmNborderWidth = 1;
            XmNdialogStyle = XmDIALOG_PRIMARY_APPLICATION_MODAL;
            XmNdialogTitle = 
            compound_string("Expanded Axis Definitions");
            XmNautoUnmanage = false;
            };
        controls
            {
            XmForm 
                {
                arguments
                    {
                    XmNleftAttachment = XmATTACH_FORM;
                    XmNtopAttachment = XmATTACH_FORM;
                    XmNbottomAttachment = XmATTACH_FORM;
                    XmNbottomOffset = 30;
                    XmNrightAttachment = XmATTACH_FORM;
                    };
                controls
                    {
                    XmScrolledText expanded_y;
                    XmScrolledText expanded_x;
                    XmLabelGadget 
                        {
                        arguments
                            {
                            XmNlabelString = 
                            compound_string("Y Axis Value");
                            XmNleftAttachment = XmATTACH_POSITION;
                            XmNtopAttachment = XmATTACH_FORM;
                            XmNtopOffset = 2;
                            XmNleftPosition = 40;
                            };
                        };
                    XmLabelGadget 
                        {
                        arguments
                            {
                            XmNlabelString = 
                            compound_string("X Axis Value");
                            XmNleftAttachment = XmATTACH_POSITION;
                            XmNtopAttachment = XmATTACH_WIDGET;
                            XmNtopWidget = XmScrolledText expanded_y;
                            XmNtopOffset = 2;
                            XmNleftPosition = 40;
                            };
                        };
                    };
                };
            XmPushButtonGadget 
                {
                arguments
                    {
                    XmNlabelString = 
                    compound_string("Ok");
                    XmNleftAttachment = XmATTACH_FORM;
                    XmNtopAttachment = XmATTACH_NONE;
                    XmNleftOffset = 5;
                    XmNbottomAttachment = XmATTACH_FORM;
                    };
                callbacks
                    {
                    XmNactivateCallback = procedures
                        {
                        expand_ok();
                        };
                    };
                };
            XmPushButtonGadget 
                {
                arguments
                    {
                    XmNlabelString = 
                    compound_string("Reset");
                    XmNleftAttachment = XmATTACH_POSITION;
                    XmNtopAttachment = XmATTACH_NONE;
                    XmNleftPosition = 46;
                    XmNbottomAttachment = XmATTACH_FORM;
                    };
                callbacks
                    {
                    XmNactivateCallback = procedures
                        {
                        expand_reset(1);
                        };
                    };
                };
            XmPushButtonGadget 
                {
                arguments
                    {
                    XmNlabelString = 
                    compound_string("Cancel");
                    XmNleftAttachment = XmATTACH_NONE;
                    XmNtopAttachment = XmATTACH_NONE;
                    XmNrightAttachment = XmATTACH_FORM;
                    XmNrightOffset = 5;
                    XmNbottomAttachment = XmATTACH_FORM;
                    };
                callbacks
                    {
                    XmNactivateCallback = procedures
                        {
                        expand_cancel();
                        };
                    };
                };
            };
        };
    expanded_y: XmScrolledText 
        {
        arguments
            {
            XmNleftAttachment = XmATTACH_FORM;
            XmNtopAttachment = XmATTACH_FORM;
            XmNtopOffset = 25;
            XmNrightAttachment = XmATTACH_FORM;
            XmNbottomAttachment = XmATTACH_POSITION;
            XmNbottomPosition = 50;
            XmNeditMode = XmMULTI_LINE_EDIT;
            };
        };
    expanded_x: XmScrolledText 
        {
        arguments
            {
            XmNleftAttachment = XmATTACH_FORM;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopOffset = 25;
            XmNrightAttachment = XmATTACH_FORM;
            XmNtopWidget = XmScrolledText expanded_y;
            XmNbottomAttachment = XmATTACH_FORM;
            XmNeditMode = XmMULTI_LINE_EDIT;
            };
        };
    disable_icon_updates: XmToggleButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Disable when icon");
            XmNset = true;
            XmNmnemonic = keysym("i");
            };
        };
    apply_button: XmPushButtonGadget 
        {
        arguments
            {
            XmNlabelString = 
            compound_string("Apply");
            XmNshadowThickness = 4;
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmPushButtonGadget ok_button;
            XmNleftAttachment = XmATTACH_POSITION;
            XmNleftPosition = 25;
            XmNleftOffset = -15;
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                ApplyDataSetup(2);
                };
            };
        };

end module;

